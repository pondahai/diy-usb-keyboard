   1               		.file	"RNDIS.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.RNDIS_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	RNDIS_Device_ProcessControlRequest
  13               	RNDIS_Device_ProcessControlRequest:
  14               	.LFB65:
  15               		.file 1 "../../LUFA/Drivers/USB/Class/Device/RNDIS.c"
   1:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** /*
   2:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****               
   5:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** */
   8:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
   9:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** /*
  10:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  12:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  21:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** */
  30:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  31:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #include "../../HighLevel/USBMode.h"
  33:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #if defined(USB_CAN_BE_DEVICE)
  34:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  35:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_RNDIS_CLASS_DEVICE_C
  36:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #define  __INCLUDE_FROM_RNDIS_DRIVER
  37:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** #include "RNDIS.h"
  38:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  39:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static const uint32_t PROGMEM AdapterSupportedOIDList[]  =
  40:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
  41:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_SUPPORTED_LIST,
  42:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_PHYSICAL_MEDIUM,
  43:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_HARDWARE_STATUS,
  44:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_SUPPORTED,
  45:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_IN_USE,
  46:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_FRAME_SIZE,
  47:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_TOTAL_SIZE,
  48:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_LINK_SPEED,
  49:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_TRANSMIT_BLOCK_SIZE,
  50:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RECEIVE_BLOCK_SIZE,
  51:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_VENDOR_ID,
  52:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_VENDOR_DESCRIPTION,
  53:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_CURRENT_PACKET_FILTER,
  54:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MAXIMUM_TOTAL_SIZE,
  55:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_MEDIA_CONNECT_STATUS,
  56:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_XMIT_OK,
  57:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_OK,
  58:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_XMIT_ERROR,
  59:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_ERROR,
  60:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_GEN_RCV_NO_BUFFER,
  61:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_PERMANENT_ADDRESS,
  62:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_CURRENT_ADDRESS,
  63:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_MULTICAST_LIST,
  64:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_MAXIMUM_LIST_SIZE,
  65:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_RCV_ERROR_ALIGNMENT,
  66:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_XMIT_ONE_COLLISION,
  67:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		OID_802_3_XMIT_MORE_COLLISIONS,
  68:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	};
  69:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  70:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_ProcessControlRequest(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
  71:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
  16               		.loc 1 71 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39               	.LBB55:
  40               	.LBB56:
  41               		.file 2 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h"
   1:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
   2:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****              LUFA Library
   3:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****      Copyright (C) Dean Camera, 2010.
   4:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****               
   5:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****       www.fourwalledcubicle.com
   7:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
   8:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
   9:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /*
  10:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  12:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   Permission to use, copy, modify, distribute, and sell this 
  13:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software and its documentation for any purpose is hereby granted
  14:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   without fee, provided that the above copyright notice appear in 
  15:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   all copies and that both that the copyright notice and this
  16:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   permission notice and warranty disclaimer appear in supporting 
  17:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   documentation, and that the name of the author not be used in 
  18:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   advertising or publicity pertaining to distribution of the 
  19:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software without specific, written prior permission.
  20:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  21:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   The author disclaim all warranties with regard to this
  22:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   software, including all implied warranties of merchantability
  23:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   and fitness.  In no event shall the author be liable for any
  24:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   special, indirect or consequential damages or any damages
  25:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   in an action of contract, negligence or other tortious action,
  27:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   arising out of or in connection with the use or performance of
  28:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****   this software.
  29:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** */
  30:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  31:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \file
  32:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \brief USB device endpoint management definitions.
  33:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  34:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  This file contains structures, function prototypes and macros related to the management of the 
  35:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  data endpoints when the library is initialized in USB device mode.
  36:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  37:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  40:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  41:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_USB
  42:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointManagement Endpoint Management
  43:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  44:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  45:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  46:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  send/receive functions for various data types.
  47:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  48:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @{
  49:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  50:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  51:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointRW Endpoint Data Reading and Writing
  52:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  53:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  54:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  55:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  
  56:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  57:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointPrimitiveRW Read/Write of Primitive Data Types
  58:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  59:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  60:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  from and to endpoints.
  61:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */ 
  62:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  63:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** \ingroup Group_EndpointRW  
  64:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  @defgroup Group_EndpointStreamRW Read/Write of Multi-Byte Streams
  65:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  66:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of data strea
  67:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  and to endpoints.
  68:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */ 
  69:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  70:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** /** @defgroup Group_EndpointPacketManagement Endpoint Packet Management
  71:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *
  72:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  73:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h ****  */
  74:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  75:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #ifndef __ENDPOINT_H__
  76:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** #define __ENDPOINT_H__
  77:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  78:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Includes: */
  79:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/io.h>
  80:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/pgmspace.h>
  81:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <avr/eeprom.h>
  82:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include <stdbool.h>
  83:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  84:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../../../Common/Common.h"
  85:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "../HighLevel/USBTask.h"
  86:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#include "USBInterrupt.h"
  87:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  88:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
  89:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#include "../HighLevel/StreamCallbacks.h"
  90:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  91:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
  92:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Enable C linkage for C++ Compilers: */
  93:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if defined(__cplusplus)
  94:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			extern "C" {
  95:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
  96:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
  97:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Preprocessor Checks: */
  98:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  99:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
 100:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		#endif
 101:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 102:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Public Interface - May be used in end-application: */
 103:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
 104:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 105:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the OUT direction - i.e. data flows from host to device.
 106:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 107:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_OUT                      (0 << EPDIR)
 108:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 109:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint data direction mask for \ref Endpoint_ConfigureEndpoint(). This indicates that the 
 110:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  should be initialized in the IN direction - i.e. data flows from device to host.
 111:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 112:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DIR_IN                       (1 << EPDIR)
 113:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 114:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 115:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 116:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 117:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank at the one time.
 118:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 119:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_SINGLE                  (0 << EPBK0)
 120:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 121:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 122:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 123:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 124:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  accesses the second bank.
 125:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 126:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_BANK_DOUBLE                  (1 << EPBK0)
 127:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 128:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint address for the default control endpoint, which always resides in address 0. This i
 129:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  defined for convenience to give more readable code when used with the endpoint macros.
 130:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 131:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_CONTROLEP                    0
 132:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 133:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 134:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 135:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 *  value in the device descriptor. Not available if the FIXED_CONTROL_ENDPOINT_SIZE token is d
 136:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				 */
 137:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE   8
 138:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 139:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 140:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint number mask, for masking against endpoint addresses to retrieve the endpoint's
 141:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  numerical address in the device.
 142:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 143:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPNUM_MASK                   0x07
 144:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 145:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint direction mask, for masking against endpoint addresses to retrieve the endpoint's
 146:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction for comparing with the ENDPOINT_DESCRIPTOR_DIR_* masks.
 147:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 148:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPDIR_MASK                   0x80
 149:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 150:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Endpoint bank size mask, for masking against endpoint addresses to retrieve the endpoint's
 151:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank size in the device.
 152:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 153:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_EPSIZE_MASK                  0x7F
 154:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 155:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Maximum size in bytes of a given endpoint.
 156:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 157:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 158:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 159:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_MAX_SIZE(n)                  _ENDPOINT_GET_MAXSIZE(n)
 160:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 161:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates if the given endpoint supports double banking.
 162:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 163:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] n  Endpoint number, a value between 0 and (ENDPOINT_TOTAL_ENDPOINTS - 1)
 164:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */				
 165:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define ENDPOINT_DOUBLEBANK_SUPPORTED(n)      _ENDPOINT_GET_DOUBLEBANK(n)
 166:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 167:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(CONTROL_ONLY_DEVICE)
 168:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 169:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 170:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 171:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 172:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					 */
 173:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      7
 174:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 175:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS      5
 176:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 177:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 178:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS          1
 179:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 180:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 181:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Enums: */
 182:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 183:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 184:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 185:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 186:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 187:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 188:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 189:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 190:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   transfer by the host or device.
 191:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 192:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 193:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   waiting for the endpoint to become ready.
 194:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 195:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 196:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   no USB endpoint traffic can occur until th
 197:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   has resumed.
 198:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 199:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 200:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   within the software timeout period set by 
 201:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 202:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                                 */
 203:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 204:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 205:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Stream_* functions.
 206:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 207:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 208:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 209:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_Stream_RW_ErrorCodes_t
 210:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 211:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 212:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_EndpointStalled    = 1, /**< The endpoint was stalled during the stream
 213:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   transfer by the host or device.
 214:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 215:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 216:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   the transfer.
 217:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 218:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 219:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   no USB endpoint traffic can occur until the bus
 220:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   has resumed.
 221:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 222:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_Timeout            = 4, /**< The host failed to accept or send the next packe
 223:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   within the software timeout period set by the
 224:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           *   \ref USB_STREAM_TIMEOUT_MS macro.
 225:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 226:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWSTREAM_CallbackAborted    = 5, /**< Indicates that the stream's callback function
 227:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                               *   aborted the transfer early.
 228:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                           */
 229:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 230:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 231:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enum for the possible error return codes of the Endpoint_*_Control_Stream_* functions..
 232:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 233:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 234:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 235:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			enum Endpoint_ControlStream_RW_ErrorCodes_t
 236:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 237:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_NoError            = 0, /**< Command completed successfully, no error. */
 238:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_HostAborted        = 1, /**< The aborted the transfer prematurely. */
 239:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_DeviceDisconnected = 2, /**< Device was disconnected from the host during
 240:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   the transfer.
 241:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 242:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				ENDPOINT_RWCSTREAM_BusSuspended       = 3, /**< The USB bus has been suspended by the host and
 243:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   no USB endpoint traffic can occur until the bus
 244:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            *   has resumed.
 245:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                            */
 246:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			};
 247:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 248:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
 249:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 250:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 251:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 252:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        of the selected AVR model.
 253:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 254:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 255:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 256:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 257:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 258:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 259:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 260:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 261:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 262:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCX;
 263:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_4_AVR)
 264:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 265:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#elif defined(USB_SERIES_2_AVR)
 266:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return UEBCLX;
 267:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 268:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 269:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 270:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 271:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 272:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  been manipulated.
 273:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 274:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Index of the currently selected endpoint.
 275:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 276:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 277:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 278:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 279:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 280:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 281:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 282:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					return ENDPOINT_CONTROLEP;
 283:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 284:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 285:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 286:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 287:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 288:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  number (and discarding the endpoint direction bit).
 289:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 290:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 291:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the currently selected endpoint.
 292:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 293:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 294:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 295:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 296:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 297:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 298:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UENUM = EndpointNumber;
 300:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 301:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 302:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 303:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 304:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  In and Out pointers to the bank's contents.
 305:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 306:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 307:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 308:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 309:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
 310:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 311:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = (1 << EndpointNumber);
 312:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UERST = 0;
 313:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 314:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 315:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 316:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and from a host.
 317:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 318:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 319:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 320:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 321:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_EnableEndpoint(void)
 322:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 323:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << EPEN);
 324:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 325:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 326:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 327:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  to and from a host.
 328:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 329:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 330:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_DisableEndpoint(void)
 331:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 332:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX &= ~(1 << EPEN);
 333:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 334:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 335:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 336:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 337:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
 338:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 339:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 340:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsEnabled(void)
 341:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 342:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 343:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 344:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 346:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 347:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 348:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 349:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction and the endpoint bank is full.
 350:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 351:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 352:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 353:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depe
 354:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 355:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 356:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 357:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 358:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 359:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 360:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 361:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is configured.
 362:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 363:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise
 364:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 365:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 366:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsConfigured(void)
 367:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 368:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 369:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 370:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 371:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 372:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 373:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  masking the return value against (1 << {Endpoint Number}).
 374:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 375:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 376:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 377:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 378:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 379:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 380:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEINT;
 381:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 382:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 383:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 384:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoints).
 385:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 386:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 387:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 388:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the specified endpoint has interrupted, false otherwise.
 389:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 390:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 391:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 392:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 393:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINT & (1 << EndpointNumber)) ? true : false);
 394:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 395:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 396:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected IN endpoint is ready for a new packet.
 397:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 398:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 399:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 400:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
 401:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 402:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 403:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsINReady(void)
 404:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << TXINI))  ? true : false);
 406:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 407:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 408:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the selected OUT endpoint has received new packet.
 409:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 410:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 411:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 412:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
 413:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 414:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 415:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 416:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 417:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 419:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 420:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 421:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 422:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 423:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 424:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
 425:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 426:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 427:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 428:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 429:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  42               		.loc 2 429 0
  43 0008 2091 E800 		lds r18,232
  44               	.LBE56:
  45               	.LBE55:
  72:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_IsSETUPReceived()))
  46               		.loc 1 72 0
  47 000c 23FF      		sbrs r18,3
  48 000e 00C0      		rjmp .L1
  73:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
  74:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  
  75:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_ControlRequest.wIndex != RNDISInterfaceInfo->Config.ControlInterfaceNumber)
  49               		.loc 1 75 0
  50 0010 FC01      		movw r30,r24
  51 0012 4081      		ld r20,Z
  52 0014 2091 0000 		lds r18,USB_ControlRequest+4
  53 0018 3091 0000 		lds r19,USB_ControlRequest+4+1
  54 001c 4217      		cp r20,r18
  55 001e 1306      		cpc __zero_reg__,r19
  56 0020 01F4      		brne .L1
  57 0022 EC01      		movw r28,r24
  76:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
  77:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  78:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (USB_ControlRequest.bRequest)
  58               		.loc 1 78 0
  59 0024 8091 0000 		lds r24,USB_ControlRequest+1
  60               	.LVL1:
  61 0028 8823      		tst r24
  62 002a 01F0      		breq .L3
  63 002c 8130      		cpi r24,lo8(1)
  64 002e 01F4      		brne .+2
  65 0030 00C0      		rjmp .L4
  66               	.LVL2:
  67               	.L1:
  68               	/* epilogue start */
  79:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
  80:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REQ_SendEncapsulatedCommand:
  81:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  82:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
  83:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearSETUP();
  84:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  85:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_Read_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, USB_ControlReques
  86:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				RNDIS_Device_ProcessRNDISControlMessage(RNDISInterfaceInfo);
  87:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearIN();
  88:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
  89:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
  90:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
  91:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REQ_GetEncapsulatedResponse:
  92:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  93:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
  94:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearSETUP();
  95:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  96:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RND
  97:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
  98:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				if (!(MessageHeader->MessageLength))
  99:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				{
 100:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					RNDISInterfaceInfo->State.RNDISMessageBuffer[0] = 0;
 101:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					MessageHeader->MessageLength = 1;
 102:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				}
 103:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 104:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_Write_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, MessageHeader->M
 105:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearOUT();
 106:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 107:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				MessageHeader->MessageLength = 0;
 108:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 109:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	
 110:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 111:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 112:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
  69               		.loc 1 112 0
  70 0032 DF91      		pop r29
  71 0034 CF91      		pop r28
  72 0036 1F91      		pop r17
  73 0038 0F91      		pop r16
  74 003a 0895      		ret
  75               	.LVL3:
  76               	.L3:
  81:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
  77               		.loc 1 81 0
  78 003c 8091 0000 		lds r24,USB_ControlRequest
  79 0040 8132      		cpi r24,lo8(33)
  80 0042 01F4      		brne .L1
  81               	.LBB57:
  82               	.LBB58:
 430:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 431:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 432:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 433:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint for the next packet.
 434:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 435:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 436:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 437:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This is not applicable for non CONTROL type endpoints. 
 438:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 439:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 440:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearSETUP(void)
 441:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 442:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEINTX &= ~(1 << RXSTPI);
  83               		.loc 2 442 0
  84 0044 8091 E800 		lds r24,232
  85 0048 877F      		andi r24,lo8(-9)
  86 004a 8093 E800 		sts 232,r24
  87               	.LBE58:
  88               	.LBE57:
  85:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				RNDIS_Device_ProcessRNDISControlMessage(RNDISInterfaceInfo);
  89               		.loc 1 85 0
  90 004e 6091 0000 		lds r22,USB_ControlRequest+6
  91 0052 7091 0000 		lds r23,USB_ControlRequest+6+1
  92 0056 CF01      		movw r24,r30
  93 0058 4596      		adiw r24,21
  94 005a 0E94 0000 		call Endpoint_Read_Control_Stream_LE
  95               	.LVL4:
  96               	.LBB59:
  97               	.LBB60:
 113:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 114:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** bool RNDIS_Device_ConfigureEndpoints(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 115:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 116:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 117:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 119:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 120:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         RNDISInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOI
 121:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 122:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 123:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 124:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 126:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 127:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 RNDISInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_B
 128:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 129:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 130:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 131:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (!(Endpoint_ConfigureEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_IN
 133:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 134:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 RNDISInterfaceInfo->Config.NotificationEndpointDoubleBank ? ENDPO
 135:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 136:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		return false;
 137:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 138:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 139:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	return true;
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 141:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 142:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_USBTask(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 143:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 144:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 145:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
 146:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 147:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RNDISM
 148:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 149:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber);
 150:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.ResponseReady)
 152:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 153:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		USB_Request_Header_t Notification = (USB_Request_Header_t)
 154:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 155:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE),
 156:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.bRequest      = NOTIF_ResponseAvailable,
 157:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wValue        = 0,
 158:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wIndex        = 0,
 159:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				.wLength       = 0,
 160:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			};
 161:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 162:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NO_STREAM_CALLBACK);
 163:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 164:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_ClearIN();
 165:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 166:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		RNDISInterfaceInfo->State.ResponseReady = false;
 167:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 168:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if ((RNDISInterfaceInfo->State.CurrRNDISState == RNDIS_Data_Initialized) && !(MessageHeader->Messa
 170:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 171:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		RNDIS_Packet_Message_t RNDISPacketHeader;
 172:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 173:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber);
 174:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		if (Endpoint_IsOUTReceived() && !(RNDISInterfaceInfo->State.FrameIN.FrameInBuffer))
 176:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 177:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Read_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NO_STREAM_CALLBACK);
 178:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 179:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (RNDISPacketHeader.DataLength > ETHERNET_FRAME_SIZE_MAX)
 180:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 181:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_StallTransaction();
 182:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				return;
 183:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 184:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 185:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Read_Stream_LE(RNDISInterfaceInfo->State.FrameIN.FrameData, RNDISPacketHeader.DataLengt
 186:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 187:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearOUT();
 188:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 189:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameIN.FrameLength = RNDISPacketHeader.DataLength;
 190:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 191:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameIN.FrameInBuffer = true;
 192:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 193:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 194:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataINEndpointNumber);
 195:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.FrameOUT.FrameInBuffer)
 197:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 198:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memset(&RNDISPacketHeader, 0, sizeof(RNDIS_Packet_Message_t));
 199:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 200:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageType   = REMOTE_NDIS_PACKET_MSG;
 201:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageLength = (sizeof(RNDIS_Packet_Message_t) + RNDISInterfaceInfo->State.Fr
 202:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataOffset    = (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_
 203:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataLength    = RNDISInterfaceInfo->State.FrameOUT.FrameLength;
 204:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 205:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NO_STREAM_CALLBACK)
 206:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(RNDISInterfaceInfo->State.FrameOUT.FrameData, RNDISPacketHeader.DataLen
 207:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearIN();
 208:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 209:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.FrameOUT.FrameInBuffer = false;
 210:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 211:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 212:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }							
 213:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 214:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** void RNDIS_Device_ProcessRNDISControlMessage(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo
 215:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 216:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	/* Note: Only a single buffer is used for both the received message and its response to save SRAM.
 217:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	         this, response bytes should be filled in order so that they do not clobber unread data in
 218:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 219:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RNDISM
 220:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 221:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (MessageHeader->MessageType)
  98               		.loc 1 221 0
  99 005e 8D89      		ldd r24,Y+21
 100 0060 9E89      		ldd r25,Y+22
 101 0062 AF89      		ldd r26,Y+23
 102 0064 B88D      		ldd r27,Y+24
 103 0066 8430      		cpi r24,4
 104 0068 9105      		cpc r25,__zero_reg__
 105 006a A105      		cpc r26,__zero_reg__
 106 006c B105      		cpc r27,__zero_reg__
 107 006e 01F4      		brne .+2
 108 0070 00C0      		rjmp .L6
 109 0072 00F4      		brsh .L7
 110 0074 8230      		cpi r24,2
 111 0076 9105      		cpc r25,__zero_reg__
 112 0078 A105      		cpc r26,__zero_reg__
 113 007a B105      		cpc r27,__zero_reg__
 114 007c 01F0      		breq .L8
 115 007e 0397      		sbiw r24,3
 116 0080 A105      		cpc r26,__zero_reg__
 117 0082 B105      		cpc r27,__zero_reg__
 118 0084 01F4      		brne .+2
 119 0086 00C0      		rjmp .L9
 120               	.LVL5:
 121               	.L5:
 122               	.LBE60:
 123               	.LBE59:
 124               	.LBB73:
 125               	.LBB74:
 443:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 444:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 445:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 446:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 447:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 448:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 449:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 450:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 451:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearIN(void)
 452:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 453:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 126               		.loc 2 454 0
 127 0088 8091 E800 		lds r24,232
 128 008c 8E77      		andi r24,lo8(126)
 129 008e 8093 E800 		sts 232,r24
 130 0092 00C0      		rjmp .L1
 131               	.LVL6:
 132               	.L7:
 133               	.LBE74:
 134               	.LBE73:
 135               	.LBB75:
 136               	.LBB72:
 137               		.loc 1 221 0
 138 0094 8630      		cpi r24,6
 139 0096 9105      		cpc r25,__zero_reg__
 140 0098 A105      		cpc r26,__zero_reg__
 141 009a B105      		cpc r27,__zero_reg__
 142 009c 01F4      		brne .+2
 143 009e 00C0      		rjmp .L10
 144 00a0 00F4      		brsh .+2
 145 00a2 00C0      		rjmp .L11
 146 00a4 0897      		sbiw r24,8
 147 00a6 A105      		cpc r26,__zero_reg__
 148 00a8 B105      		cpc r27,__zero_reg__
 149 00aa 01F4      		brne .L5
 150               	.LBB61:
 222:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 223:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_INITIALIZE_MSG:
 224:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 225:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 226:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Initialize_Message_t*  INITIALIZE_Message  =
 227:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			               (RNDIS_Initialize_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 228:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Initialize_Complete_t* INITIALIZE_Response =
 229:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			               (RNDIS_Initialize_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 230:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 231:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageType           = REMOTE_NDIS_INITIALIZE_CMPLT;
 232:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageLength         = sizeof(RNDIS_Initialize_Complete_t);
 233:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->RequestId             = INITIALIZE_Message->RequestId;
 234:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Status                = REMOTE_NDIS_STATUS_SUCCESS;
 235:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 236:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MajorVersion          = REMOTE_NDIS_VERSION_MAJOR;
 237:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MinorVersion          = REMOTE_NDIS_VERSION_MINOR;			
 238:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->DeviceFlags           = REMOTE_NDIS_DF_CONNECTIONLESS;
 239:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Medium                = REMOTE_NDIS_MEDIUM_802_3;
 240:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxPacketsPerTransfer = 1;
 241:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxTransferSize       = (sizeof(RNDIS_Packet_Message_t) + ETHERNET_FRAME_SI
 242:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->PacketAlignmentFactor = 0;
 243:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListOffset          = 0;
 244:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListSize            = 0;
 245:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 246:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = RNDIS_Initialized;
 247:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 248:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 249:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_HALT_MSG:
 250:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = false;
 251:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			MessageHeader->MessageLength = 0;
 252:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 253:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = RNDIS_Uninitialized;
 254:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 255:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 256:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_QUERY_MSG:
 257:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 258:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 259:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Query_Message_t*  QUERY_Message  = (RNDIS_Query_Message_t*)&RNDISInterfaceInfo->State.RNDI
 260:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Query_Complete_t* QUERY_Response = (RNDIS_Query_Complete_t*)&RNDISInterfaceInfo->State.RND
 261:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint32_t                Query_Oid      = QUERY_Message->Oid;
 262:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 263:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void*     QueryData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_
 264:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                                    QUERY_Message->InformationBu
 265:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void*     ResponseData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Query_Comple
 266:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint16_t  ResponseSize;
 267:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 268:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageType   = REMOTE_NDIS_QUERY_CMPLT;
 269:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageLength = sizeof(RNDIS_Query_Complete_t);
 270:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 271:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			if (RNDIS_Device_ProcessNDISQuery(RNDISInterfaceInfo, Query_Oid, QueryData, QUERY_Message->Infor
 272:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                  ResponseData, &ResponseSize))
 273:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 274:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->Status                  = REMOTE_NDIS_STATUS_SUCCESS;
 275:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->MessageLength          += ResponseSize;
 276:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							
 277:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferLength = ResponseSize;
 278:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = (sizeof(RNDIS_Query_Complete_t) - sizeof(RNDIS_Messag
 279:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 280:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			else
 281:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{				
 282:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->Status                  = REMOTE_NDIS_STATUS_NOT_SUPPORTED;
 283:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 284:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferLength = 0;
 285:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = 0;
 286:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 287:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 288:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 289:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_SET_MSG:
 290:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 291:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 292:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Set_Message_t*  SET_Message  = (RNDIS_Set_Message_t*)&RNDISInterfaceInfo->State.RNDISMessa
 293:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Set_Complete_t* SET_Response = (RNDIS_Set_Complete_t*)&RNDISInterfaceInfo->State.RNDISMess
 294:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint32_t              SET_Oid      = SET_Message->Oid;
 295:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 296:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageType   = REMOTE_NDIS_SET_CMPLT;
 297:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageLength = sizeof(RNDIS_Set_Complete_t);
 298:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->RequestId     = SET_Message->RequestId;
 299:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 300:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			void* SetData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_t) +
 301:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                              SET_Message->InformationBufferOffs
 302:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 303:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->Status = RNDIS_Device_ProcessNDISSet(RNDISInterfaceInfo, SET_Oid, SetData,
 304:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   SET_Message->InformationBufferLength) ?
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   REMOTE_NDIS_STATUS_SUCCESS : REMOTE_NDIS_STAT
 306:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 307:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_RESET_MSG:
 308:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 309:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 310:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_Reset_Complete_t* RESET_Response = (RNDIS_Reset_Complete_t*)&RNDISInterfaceInfo->State.RND
 311:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 312:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageType     = REMOTE_NDIS_RESET_CMPLT;
 313:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageLength   = sizeof(RNDIS_Reset_Complete_t);
 314:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->Status          = REMOTE_NDIS_STATUS_SUCCESS;
 315:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->AddressingReset = 0;
 316:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 317:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 318:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case REMOTE_NDIS_KEEPALIVE_MSG:
 319:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.ResponseReady = true;
 151               		.loc 1 319 0
 152 00ac FE01      		movw r30,r28
 153 00ae EB56      		subi r30,107
 154 00b0 FF4F      		sbci r31,-1
 155 00b2 81E0      		ldi r24,lo8(1)
 156 00b4 8083      		st Z,r24
 157               	.LVL7:
 320:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 321:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_KeepAlive_Message_t*  KEEPALIVE_Message  =
 322:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                (RNDIS_KeepAlive_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 323:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDIS_KeepAlive_Complete_t* KEEPALIVE_Response =
 324:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                (RNDIS_KeepAlive_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 325:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 326:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->MessageType   = REMOTE_NDIS_KEEPALIVE_CMPLT;
 158               		.loc 1 326 0
 159 00b6 88E0      		ldi r24,lo8(8)
 160 00b8 90E0      		ldi r25,0
 161 00ba A0E0      		ldi r26,0
 162 00bc B0E8      		ldi r27,lo8(-128)
 163 00be 8D8B      		std Y+21,r24
 164 00c0 9E8B      		std Y+22,r25
 165 00c2 AF8B      		std Y+23,r26
 166 00c4 B88F      		std Y+24,r27
 327:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->MessageLength = sizeof(RNDIS_KeepAlive_Complete_t);
 167               		.loc 1 327 0
 168 00c6 80E1      		ldi r24,lo8(16)
 169 00c8 90E0      		ldi r25,0
 170 00ca A0E0      		ldi r26,0
 171 00cc B0E0      		ldi r27,0
 172 00ce 898F      		std Y+25,r24
 173 00d0 9A8F      		std Y+26,r25
 174 00d2 AB8F      		std Y+27,r26
 175 00d4 BC8F      		std Y+28,r27
 176 00d6 00C0      		rjmp .L52
 177               	.LVL8:
 178               	.L8:
 224:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 179               		.loc 1 224 0
 180 00d8 FE01      		movw r30,r28
 181 00da EB56      		subi r30,107
 182 00dc FF4F      		sbci r31,-1
 183 00de 21E0      		ldi r18,lo8(1)
 184 00e0 2083      		st Z,r18
 185               	.LVL9:
 231:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MessageLength         = sizeof(RNDIS_Initialize_Complete_t);
 186               		.loc 1 231 0
 187 00e2 82E0      		ldi r24,lo8(2)
 188 00e4 90E0      		ldi r25,0
 189 00e6 A0E0      		ldi r26,0
 190 00e8 B0E8      		ldi r27,lo8(-128)
 191 00ea 8D8B      		std Y+21,r24
 192 00ec 9E8B      		std Y+22,r25
 193 00ee AF8B      		std Y+23,r26
 194 00f0 B88F      		std Y+24,r27
 232:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->RequestId             = INITIALIZE_Message->RequestId;
 195               		.loc 1 232 0
 196 00f2 84E3      		ldi r24,lo8(52)
 197 00f4 90E0      		ldi r25,0
 198 00f6 A0E0      		ldi r26,0
 199 00f8 B0E0      		ldi r27,0
 200 00fa 898F      		std Y+25,r24
 201 00fc 9A8F      		std Y+26,r25
 202 00fe AB8F      		std Y+27,r26
 203 0100 BC8F      		std Y+28,r27
 234:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 204               		.loc 1 234 0
 205 0102 19A2      		std Y+33,__zero_reg__
 206 0104 1AA2      		std Y+34,__zero_reg__
 207 0106 1BA2      		std Y+35,__zero_reg__
 208 0108 1CA2      		std Y+36,__zero_reg__
 236:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MinorVersion          = REMOTE_NDIS_VERSION_MINOR;			
 209               		.loc 1 236 0
 210 010a 81E0      		ldi r24,lo8(1)
 211 010c 90E0      		ldi r25,0
 212 010e A0E0      		ldi r26,0
 213 0110 B0E0      		ldi r27,0
 214 0112 8DA3      		std Y+37,r24
 215 0114 9EA3      		std Y+38,r25
 216 0116 AFA3      		std Y+39,r26
 217 0118 B8A7      		std Y+40,r27
 237:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->DeviceFlags           = REMOTE_NDIS_DF_CONNECTIONLESS;
 218               		.loc 1 237 0
 219 011a 19A6      		std Y+41,__zero_reg__
 220 011c 1AA6      		std Y+42,__zero_reg__
 221 011e 1BA6      		std Y+43,__zero_reg__
 222 0120 1CA6      		std Y+44,__zero_reg__
 238:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->Medium                = REMOTE_NDIS_MEDIUM_802_3;
 223               		.loc 1 238 0
 224 0122 8DA7      		std Y+45,r24
 225 0124 9EA7      		std Y+46,r25
 226 0126 AFA7      		std Y+47,r26
 227 0128 B8AB      		std Y+48,r27
 239:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxPacketsPerTransfer = 1;
 228               		.loc 1 239 0
 229 012a 19AA      		std Y+49,__zero_reg__
 230 012c 1AAA      		std Y+50,__zero_reg__
 231 012e 1BAA      		std Y+51,__zero_reg__
 232 0130 1CAA      		std Y+52,__zero_reg__
 240:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->MaxTransferSize       = (sizeof(RNDIS_Packet_Message_t) + ETHERNET_FRAME_SI
 233               		.loc 1 240 0
 234 0132 8DAB      		std Y+53,r24
 235 0134 9EAB      		std Y+54,r25
 236 0136 AFAB      		std Y+55,r26
 237 0138 B8AF      		std Y+56,r27
 241:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->PacketAlignmentFactor = 0;
 238               		.loc 1 241 0
 239 013a 88E0      		ldi r24,lo8(8)
 240 013c 96E0      		ldi r25,lo8(6)
 241 013e A0E0      		ldi r26,0
 242 0140 B0E0      		ldi r27,0
 243 0142 89AF      		std Y+57,r24
 244 0144 9AAF      		std Y+58,r25
 245 0146 ABAF      		std Y+59,r26
 246 0148 BCAF      		std Y+60,r27
 242:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListOffset          = 0;
 247               		.loc 1 242 0
 248 014a E855      		subi r30,88
 249 014c F109      		sbc r31,__zero_reg__
 250 014e 1082      		st Z,__zero_reg__
 251 0150 1182      		std Z+1,__zero_reg__
 252 0152 1282      		std Z+2,__zero_reg__
 253 0154 1382      		std Z+3,__zero_reg__
 243:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			INITIALIZE_Response->AFListSize            = 0;
 254               		.loc 1 243 0
 255 0156 3496      		adiw r30,4
 256 0158 1082      		st Z,__zero_reg__
 257 015a 1182      		std Z+1,__zero_reg__
 258 015c 1282      		std Z+2,__zero_reg__
 259 015e 1382      		std Z+3,__zero_reg__
 244:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 260               		.loc 1 244 0
 261 0160 3496      		adiw r30,4
 262 0162 1082      		st Z,__zero_reg__
 263 0164 1182      		std Z+1,__zero_reg__
 264 0166 1282      		std Z+2,__zero_reg__
 265 0168 1382      		std Z+3,__zero_reg__
 246:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 266               		.loc 1 246 0
 267 016a CA56      		subi r28,106
 268 016c DF4F      		sbci r29,-1
 269               	.LVL10:
 270 016e 2883      		st Y,r18
 271 0170 00C0      		rjmp .L5
 272               	.LVL11:
 273               	.L9:
 250:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			MessageHeader->MessageLength = 0;
 274               		.loc 1 250 0
 275 0172 FE01      		movw r30,r28
 276 0174 EB56      		subi r30,107
 277 0176 FF4F      		sbci r31,-1
 278 0178 1082      		st Z,__zero_reg__
 251:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 279               		.loc 1 251 0
 280 017a 198E      		std Y+25,__zero_reg__
 281 017c 1A8E      		std Y+26,__zero_reg__
 282 017e 1B8E      		std Y+27,__zero_reg__
 283 0180 1C8E      		std Y+28,__zero_reg__
 253:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 284               		.loc 1 253 0
 285 0182 CA56      		subi r28,106
 286 0184 DF4F      		sbci r29,-1
 287               	.LVL12:
 288 0186 1882      		st Y,__zero_reg__
 289 0188 00C0      		rjmp .L5
 290               	.LVL13:
 291               	.L6:
 257:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 292               		.loc 1 257 0
 293 018a 81E0      		ldi r24,lo8(1)
 294 018c FE01      		movw r30,r28
 295 018e EB56      		subi r30,107
 296 0190 FF4F      		sbci r31,-1
 297 0192 8083      		st Z,r24
 298               	.LVL14:
 261:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 299               		.loc 1 261 0
 300 0194 49A1      		ldd r20,Y+33
 301 0196 5AA1      		ldd r21,Y+34
 302 0198 6BA1      		ldd r22,Y+35
 303 019a 7CA1      		ldd r23,Y+36
 304               	.LVL15:
 265:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			uint16_t  ResponseSize;
 305               		.loc 1 265 0
 306 019c CE01      		movw r24,r28
 307 019e 8D96      		adiw r24,45
 308               	.LVL16:
 268:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			QUERY_Response->MessageLength = sizeof(RNDIS_Query_Complete_t);
 309               		.loc 1 268 0
 310 01a0 04E0      		ldi r16,lo8(4)
 311 01a2 10E0      		ldi r17,0
 312 01a4 20E0      		ldi r18,0
 313 01a6 30E8      		ldi r19,lo8(-128)
 314 01a8 0D8B      		std Y+21,r16
 315 01aa 1E8B      		std Y+22,r17
 316 01ac 2F8B      		std Y+23,r18
 317 01ae 388F      		std Y+24,r19
 269:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 						
 318               		.loc 1 269 0
 319 01b0 08E1      		ldi r16,lo8(24)
 320 01b2 10E0      		ldi r17,0
 321 01b4 20E0      		ldi r18,0
 322 01b6 30E0      		ldi r19,0
 323 01b8 098F      		std Y+25,r16
 324 01ba 1A8F      		std Y+26,r17
 325 01bc 2B8F      		std Y+27,r18
 326 01be 3C8F      		std Y+28,r19
 327               	.LVL17:
 328               	.LBB62:
 329               	.LBB63:
 328:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->RequestId     = KEEPALIVE_Message->RequestId;
 329:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			KEEPALIVE_Response->Status        = REMOTE_NDIS_STATUS_SUCCESS;
 330:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 331:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 332:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 333:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 334:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 335:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static bool RNDIS_Device_ProcessNDISQuery(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 336:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           const uint32_t OId,
 337:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           void* const QueryData,
 338:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           const uint16_t QuerySize,
 339:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           void* ResponseData,
 340:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                           uint16_t* const ResponseSize)
 341:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 342:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)QueryData;
 343:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)QuerySize;
 344:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (OId)
 330               		.loc 1 345 0
 331 01c0 4E30      		cpi r20,14
 332 01c2 F1E0      		ldi r31,1
 333 01c4 5F07      		cpc r21,r31
 334 01c6 6F07      		cpc r22,r31
 335 01c8 7105      		cpc r23,__zero_reg__
 336 01ca 01F4      		brne .+2
 337 01cc 00C0      		rjmp .L14
 338 01ce 00F0      		brlo .+2
 339 01d0 00C0      		rjmp .L15
 340 01d2 4730      		cpi r20,7
 341 01d4 E1E0      		ldi r30,1
 342 01d6 5E07      		cpc r21,r30
 343 01d8 6E07      		cpc r22,r30
 344 01da 7105      		cpc r23,__zero_reg__
 345 01dc 01F4      		brne .+2
 346 01de 00C0      		rjmp .L16
 347 01e0 00F4      		brsh .L17
 348 01e2 4530      		cpi r20,5
 349 01e4 21E0      		ldi r18,1
 350 01e6 5207      		cpc r21,r18
 351 01e8 6207      		cpc r22,r18
 352 01ea 7105      		cpc r23,__zero_reg__
 353 01ec 00F4      		brsh .L18
 354 01ee 4230      		cpi r20,2
 355 01f0 E1E0      		ldi r30,1
 356 01f2 5E07      		cpc r21,r30
 357 01f4 6E07      		cpc r22,r30
 358 01f6 7105      		cpc r23,__zero_reg__
 359 01f8 00F0      		brlo .+2
 360 01fa 00C0      		rjmp .L19
 361 01fc 4130      		cpi r20,1
 362 01fe 5140      		sbci r21,1
 363 0200 6140      		sbci r22,1
 364 0202 7105      		cpc r23,__zero_reg__
 365 0204 01F4      		brne .+2
 366 0206 00C0      		rjmp .L20
 367               	.LVL18:
 368               	.L13:
 369               	.LBE63:
 370               	.LBE62:
 282:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 371               		.loc 1 282 0
 372 0208 8BEB      		ldi r24,lo8(-69)
 373 020a 90E0      		ldi r25,0
 374 020c A0E0      		ldi r26,0
 375 020e B0EC      		ldi r27,lo8(-64)
 376 0210 89A3      		std Y+33,r24
 377 0212 9AA3      		std Y+34,r25
 378 0214 ABA3      		std Y+35,r26
 379 0216 BCA3      		std Y+36,r27
 380               	.LVL19:
 284:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = 0;
 381               		.loc 1 284 0
 382 0218 1DA2      		std Y+37,__zero_reg__
 383 021a 1EA2      		std Y+38,__zero_reg__
 384 021c 1FA2      		std Y+39,__zero_reg__
 385 021e 18A6      		std Y+40,__zero_reg__
 285:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 386               		.loc 1 285 0
 387 0220 19A6      		std Y+41,__zero_reg__
 388 0222 1AA6      		std Y+42,__zero_reg__
 389 0224 1BA6      		std Y+43,__zero_reg__
 390 0226 1CA6      		std Y+44,__zero_reg__
 391               	.LVL20:
 392 0228 00C0      		rjmp .L5
 393               	.LVL21:
 394               	.L18:
 395               	.LBB66:
 396               	.LBB64:
 397               		.loc 1 345 0
 398 022a 4630      		cpi r20,6
 399 022c 5140      		sbci r21,1
 400 022e 6140      		sbci r22,1
 401 0230 7105      		cpc r23,__zero_reg__
 402 0232 01F4      		brne .L13
 403               	.L21:
 404               	.LVL22:
 346:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 347:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_SUPPORTED_LIST:
 348:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(AdapterSupportedOIDList);
 349:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 350:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy_P(ResponseData, AdapterSupportedOIDList, sizeof(AdapterSupportedOIDList));
 351:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 352:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 353:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_PHYSICAL_MEDIUM:
 354:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 355:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 356:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate that the device is a true ethernet link */
 357:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0;
 358:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 359:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 360:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_HARDWARE_STATUS:
 361:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 362:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 363:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = NDIS_HardwareStatus_Ready;
 364:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 365:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 366:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_SUPPORTED:
 367:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_IN_USE:
 368:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 369:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 370:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = REMOTE_NDIS_MEDIUM_802_3;
 371:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 372:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 373:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_VENDOR_ID:
 374:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 375:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 376:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Vendor ID 0x0xFFFFFF is reserved for vendors who have not purchased a NDIS VID */
 377:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0x00FFFFFF;
 378:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 379:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 380:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MAXIMUM_FRAME_SIZE:
 381:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_TRANSMIT_BLOCK_SIZE:
 382:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RECEIVE_BLOCK_SIZE:
 383:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 384:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 385:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = ETHERNET_FRAME_SIZE_MAX;
 405               		.loc 1 385 0
 406 0234 8CED      		ldi r24,lo8(-36)
 407 0236 95E0      		ldi r25,lo8(5)
 408 0238 A0E0      		ldi r26,0
 409 023a B0E0      		ldi r27,0
 410               	.LVL23:
 411 023c 00C0      		rjmp .L49
 412               	.LVL24:
 413               	.L17:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 414               		.loc 1 345 0
 415 023e 4C30      		cpi r20,12
 416 0240 E1E0      		ldi r30,1
 417 0242 5E07      		cpc r21,r30
 418 0244 6E07      		cpc r22,r30
 419 0246 7105      		cpc r23,__zero_reg__
 420 0248 01F4      		brne .+2
 421 024a 00C0      		rjmp .L22
 422 024c 00F0      		brlo .+2
 423 024e 00C0      		rjmp .L23
 424 0250 4A30      		cpi r20,10
 425 0252 5140      		sbci r21,1
 426 0254 6140      		sbci r22,1
 427 0256 7105      		cpc r23,__zero_reg__
 428 0258 00F4      		brsh .L21
 429 025a 00C0      		rjmp .L13
 430               	.L15:
 431 025c 4630      		cpi r20,6
 432 025e E1E0      		ldi r30,1
 433 0260 5E07      		cpc r21,r30
 434 0262 E2E0      		ldi r30,2
 435 0264 6E07      		cpc r22,r30
 436 0266 7105      		cpc r23,__zero_reg__
 437 0268 00F4      		brsh .L24
 438 026a 4130      		cpi r20,1
 439 026c F1E0      		ldi r31,1
 440 026e 5F07      		cpc r21,r31
 441 0270 F2E0      		ldi r31,2
 442 0272 6F07      		cpc r22,r31
 443 0274 7105      		cpc r23,__zero_reg__
 444 0276 00F0      		brlo .+2
 445 0278 00C0      		rjmp .L19
 446 027a 4431      		cpi r20,20
 447 027c 21E0      		ldi r18,1
 448 027e 5207      		cpc r21,r18
 449 0280 6207      		cpc r22,r18
 450 0282 7105      		cpc r23,__zero_reg__
 451 0284 01F0      		breq .L19
 452 0286 4230      		cpi r20,2
 453 0288 82E0      		ldi r24,2
 454 028a 5807      		cpc r21,r24
 455 028c 81E0      		ldi r24,1
 456 028e 6807      		cpc r22,r24
 457 0290 7105      		cpc r23,__zero_reg__
 458               	.LVL25:
 459 0292 01F0      		breq .L19
 460 0294 4131      		cpi r20,17
 461 0296 5140      		sbci r21,1
 462 0298 6140      		sbci r22,1
 463 029a 7105      		cpc r23,__zero_reg__
 464 029c 01F0      		breq .+2
 465 029e 00C0      		rjmp .L13
 466               	.LVL26:
 386:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 387:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 388:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_VENDOR_DESCRIPTION:
 389:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = (strlen(RNDISInterfaceInfo->Config.AdapterVendorDescription) + 1);
 390:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 391:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy(ResponseData, RNDISInterfaceInfo->Config.AdapterVendorDescription, *ResponseSize);
 392:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 393:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 394:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MEDIA_CONNECT_STATUS:
 395:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 396:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 397:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = REMOTE_NDIS_MEDIA_STATE_CONNECTED;
 398:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 399:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 400:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_LINK_SPEED:
 401:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 402:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 403:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate 10Mb/s link speed */
 404:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 100000;
 405:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 406:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 407:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_PERMANENT_ADDRESS:
 408:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_CURRENT_ADDRESS:
 409:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(MAC_Address_t);
 410:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 411:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			memcpy(ResponseData, &RNDISInterfaceInfo->Config.AdapterMACAddress, sizeof(MAC_Address_t));
 412:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 413:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 414:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_MAXIMUM_LIST_SIZE:
 415:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 416:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 417:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate only one multicast address supported */
 418:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 1;
 419:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 420:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 421:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 422:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 423:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 424:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = RNDISInterfaceInfo->State.CurrPacketFilter;
 425:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 426:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;			
 427:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_XMIT_OK:
 428:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_OK:
 429:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_XMIT_ERROR:
 430:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_ERROR:
 431:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_RCV_NO_BUFFER:
 432:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_RCV_ERROR_ALIGNMENT:
 433:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_XMIT_ONE_COLLISION:
 434:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_802_3_XMIT_MORE_COLLISIONS:
 435:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 436:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 437:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Unused statistic OIDs - always return 0 for each */
 438:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = 0;
 439:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 440:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 441:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_MAXIMUM_TOTAL_SIZE:
 442:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*ResponseSize = sizeof(uint32_t);
 443:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 444:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			/* Indicate maximum overall buffer (Ethernet frame and RNDIS header) the adapter can handle */
 445:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			*((uint32_t*)ResponseData) = (RNDIS_MESSAGE_BUFFER_SIZE + ETHERNET_FRAME_SIZE_MAX);
 467               		.loc 1 445 0
 468 02a0 8CE5      		ldi r24,lo8(92)
 469 02a2 96E0      		ldi r25,lo8(6)
 470 02a4 A0E0      		ldi r26,0
 471 02a6 B0E0      		ldi r27,0
 472 02a8 00C0      		rjmp .L49
 473               	.LVL27:
 474               	.L24:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 475               		.loc 1 345 0
 476 02aa 4430      		cpi r20,4
 477 02ac F1E0      		ldi r31,1
 478 02ae 5F07      		cpc r21,r31
 479 02b0 6F07      		cpc r22,r31
 480 02b2 7F07      		cpc r23,r31
 481 02b4 01F4      		brne .+2
 482 02b6 00C0      		rjmp .L26
 483 02b8 00F4      		brsh .L27
 484 02ba 4150      		subi r20,1
 485 02bc 5140      		sbci r21,1
 486 02be 6140      		sbci r22,1
 487 02c0 7140      		sbci r23,1
 488               	.LVL28:
 489 02c2 4230      		cpi r20,2
 490 02c4 5105      		cpc r21,__zero_reg__
 491 02c6 6105      		cpc r22,__zero_reg__
 492 02c8 7105      		cpc r23,__zero_reg__
 493 02ca 00F0      		brlo .+2
 494 02cc 00C0      		rjmp .L13
 495               	.LVL29:
 411:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 496               		.loc 1 411 0
 497 02ce 26E0      		ldi r18,lo8(6)
 498 02d0 FE01      		movw r30,r28
 499 02d2 3F96      		adiw r30,15
 500 02d4 DC01      		movw r26,r24
 501               		0:
 502 02d6 0190      		ld r0,Z+
 503 02d8 0D92      		st X+,r0
 504 02da 2A95      		dec r18
 505 02dc 01F4      		brne 0b
 506               	.LVL30:
 409:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 507               		.loc 1 409 0
 508 02de 06E0      		ldi r16,lo8(6)
 509 02e0 10E0      		ldi r17,0
 510 02e2 00C0      		rjmp .L29
 511               	.LVL31:
 512               	.L27:
 345:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 513               		.loc 1 345 0
 514 02e4 4150      		subi r20,1
 515 02e6 5140      		sbci r21,1
 516 02e8 6240      		sbci r22,2
 517 02ea 7140      		sbci r23,1
 518               	.LVL32:
 519 02ec 4330      		cpi r20,3
 520 02ee 5105      		cpc r21,__zero_reg__
 521 02f0 6105      		cpc r22,__zero_reg__
 522 02f2 7105      		cpc r23,__zero_reg__
 523 02f4 00F0      		brlo .+2
 524 02f6 00C0      		rjmp .L13
 525               	.LVL33:
 526               	.L19:
 357:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 527               		.loc 1 357 0
 528 02f8 1DA6      		std Y+45,__zero_reg__
 529 02fa 1EA6      		std Y+46,__zero_reg__
 530 02fc 1FA6      		std Y+47,__zero_reg__
 531 02fe 18AA      		std Y+48,__zero_reg__
 532               	.LVL34:
 533               	.L50:
 442:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 534               		.loc 1 442 0
 535 0300 04E0      		ldi r16,lo8(4)
 536 0302 10E0      		ldi r17,0
 537 0304 00C0      		rjmp .L29
 538               	.LVL35:
 539               	.L20:
 350:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 540               		.loc 1 350 0
 541 0306 4CE6      		ldi r20,lo8(108)
 542 0308 50E0      		ldi r21,0
 543               	.LVL36:
 544 030a 60E0      		ldi r22,lo8(AdapterSupportedOIDList)
 545 030c 70E0      		ldi r23,hi8(AdapterSupportedOIDList)
 546 030e 0E94 0000 		call memcpy_P
 547               	.LVL37:
 348:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 548               		.loc 1 348 0
 549 0312 0CE6      		ldi r16,lo8(108)
 550 0314 10E0      		ldi r17,0
 551               	.LVL38:
 552               	.L29:
 553               	.LBE64:
 554               	.LBE66:
 274:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->MessageLength          += ResponseSize;
 555               		.loc 1 274 0
 556 0316 19A2      		std Y+33,__zero_reg__
 557 0318 1AA2      		std Y+34,__zero_reg__
 558 031a 1BA2      		std Y+35,__zero_reg__
 559 031c 1CA2      		std Y+36,__zero_reg__
 275:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							
 560               		.loc 1 275 0
 561 031e 30E0      		ldi r19,0
 562 0320 20E0      		ldi r18,0
 563 0322 898D      		ldd r24,Y+25
 564 0324 9A8D      		ldd r25,Y+26
 565 0326 AB8D      		ldd r26,Y+27
 566 0328 BC8D      		ldd r27,Y+28
 567 032a 800F      		add r24,r16
 568 032c 911F      		adc r25,r17
 569 032e A21F      		adc r26,r18
 570 0330 B31F      		adc r27,r19
 571 0332 898F      		std Y+25,r24
 572 0334 9A8F      		std Y+26,r25
 573 0336 AB8F      		std Y+27,r26
 574 0338 BC8F      		std Y+28,r27
 277:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				QUERY_Response->InformationBufferOffset = (sizeof(RNDIS_Query_Complete_t) - sizeof(RNDIS_Messag
 575               		.loc 1 277 0
 576 033a 0DA3      		std Y+37,r16
 577 033c 1EA3      		std Y+38,r17
 578 033e 2FA3      		std Y+39,r18
 579 0340 38A7      		std Y+40,r19
 278:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 580               		.loc 1 278 0
 581 0342 80E1      		ldi r24,lo8(16)
 582 0344 90E0      		ldi r25,0
 583 0346 A0E0      		ldi r26,0
 584 0348 B0E0      		ldi r27,0
 585 034a 89A7      		std Y+41,r24
 586 034c 9AA7      		std Y+42,r25
 587 034e ABA7      		std Y+43,r26
 588 0350 BCA7      		std Y+44,r27
 589 0352 00C0      		rjmp .L5
 590               	.LVL39:
 591               	.L22:
 592               	.LBB67:
 593               	.LBB65:
 377:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 594               		.loc 1 377 0
 595 0354 8FEF      		ldi r24,lo8(-1)
 596 0356 9FEF      		ldi r25,lo8(-1)
 597 0358 AFEF      		ldi r26,lo8(-1)
 598 035a B0E0      		ldi r27,0
 599               	.LVL40:
 600               	.L49:
 601               		.loc 1 445 0
 602 035c 8DA7      		std Y+45,r24
 603 035e 9EA7      		std Y+46,r25
 604 0360 AFA7      		std Y+47,r26
 605 0362 B8AB      		std Y+48,r27
 606 0364 00C0      		rjmp .L50
 607               	.LVL41:
 608               	.L23:
 389:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 609               		.loc 1 389 0
 610 0366 6D85      		ldd r22,Y+13
 611 0368 7E85      		ldd r23,Y+14
 612 036a FB01      		movw r30,r22
 613               		0:
 614 036c 0190      		ld __tmp_reg__,Z+
 615 036e 0020      		tst __tmp_reg__
 616 0370 01F4      		brne 0b
 617 0372 8F01      		movw r16,r30
 618 0374 061B      		sub r16,r22
 619 0376 170B      		sbc r17,r23
 620               	.LVL42:
 391:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 621               		.loc 1 391 0
 622 0378 A801      		movw r20,r16
 623               	.LVL43:
 624 037a 0E94 0000 		call memcpy
 625               	.LVL44:
 626 037e 00C0      		rjmp .L29
 627               	.LVL45:
 628               	.L16:
 404:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 629               		.loc 1 404 0
 630 0380 80EA      		ldi r24,lo8(-96)
 631 0382 96E8      		ldi r25,lo8(-122)
 632 0384 A1E0      		ldi r26,lo8(1)
 633 0386 B0E0      		ldi r27,0
 634               	.LVL46:
 635 0388 00C0      		rjmp .L49
 636               	.LVL47:
 637               	.L26:
 418:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 638               		.loc 1 418 0
 639 038a 81E0      		ldi r24,lo8(1)
 640 038c 90E0      		ldi r25,0
 641 038e A0E0      		ldi r26,0
 642 0390 B0E0      		ldi r27,0
 643               	.LVL48:
 644 0392 00C0      		rjmp .L49
 645               	.LVL49:
 646               	.L14:
 424:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 647               		.loc 1 424 0
 648 0394 FE01      		movw r30,r28
 649 0396 E956      		subi r30,105
 650 0398 FF4F      		sbci r31,-1
 651 039a 8081      		ld r24,Z
 652 039c 9181      		ldd r25,Z+1
 653 039e A281      		ldd r26,Z+2
 654 03a0 B381      		ldd r27,Z+3
 655               	.LVL50:
 656 03a2 00C0      		rjmp .L49
 657               	.LVL51:
 658               	.L11:
 659               	.LBE65:
 660               	.LBE67:
 290:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 661               		.loc 1 290 0
 662 03a4 81E0      		ldi r24,lo8(1)
 663 03a6 FE01      		movw r30,r28
 664 03a8 EB56      		subi r30,107
 665 03aa FF4F      		sbci r31,-1
 666 03ac 8083      		st Z,r24
 667               	.LVL52:
 294:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 668               		.loc 1 294 0
 669 03ae 89A1      		ldd r24,Y+33
 670 03b0 9AA1      		ldd r25,Y+34
 671 03b2 ABA1      		ldd r26,Y+35
 672 03b4 BCA1      		ldd r27,Y+36
 673               	.LVL53:
 296:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->MessageLength = sizeof(RNDIS_Set_Complete_t);
 674               		.loc 1 296 0
 675 03b6 45E0      		ldi r20,lo8(5)
 676 03b8 50E0      		ldi r21,0
 677 03ba 60E0      		ldi r22,0
 678 03bc 70E8      		ldi r23,lo8(-128)
 679 03be 4D8B      		std Y+21,r20
 680 03c0 5E8B      		std Y+22,r21
 681 03c2 6F8B      		std Y+23,r22
 682 03c4 788F      		std Y+24,r23
 297:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			SET_Response->RequestId     = SET_Message->RequestId;
 683               		.loc 1 297 0
 684 03c6 40E1      		ldi r20,lo8(16)
 685 03c8 50E0      		ldi r21,0
 686 03ca 60E0      		ldi r22,0
 687 03cc 70E0      		ldi r23,0
 688 03ce 498F      		std Y+25,r20
 689 03d0 5A8F      		std Y+26,r21
 690 03d2 6B8F      		std Y+27,r22
 691 03d4 7C8F      		std Y+28,r23
 692               	.LVL54:
 693               	.LBB68:
 694               	.LBB69:
 446:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 447:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return true;
 448:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		default:
 449:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			return false;
 450:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 451:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** }
 452:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 453:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** static bool RNDIS_Device_ProcessNDISSet(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 454:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const uint32_t OId,
 455:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const void* SetData,
 456:../../LUFA/Drivers/USB/Class/Device/RNDIS.c ****                                         const uint16_t SetSize)
 457:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** {
 458:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	(void)SetSize;
 459:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 460:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	switch (OId)
 695               		.loc 1 460 0
 696 03d6 8E30      		cpi r24,14
 697 03d8 E1E0      		ldi r30,1
 698 03da 9E07      		cpc r25,r30
 699 03dc AE07      		cpc r26,r30
 700 03de B105      		cpc r27,__zero_reg__
 701 03e0 01F0      		breq .L31
 702 03e2 8330      		cpi r24,3
 703 03e4 9140      		sbci r25,1
 704 03e6 A140      		sbci r26,1
 705 03e8 B140      		sbci r27,1
 706 03ea 01F4      		brne .L48
 707               	.LVL55:
 708               	.L51:
 709               	.LBE69:
 710               	.LBE68:
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 711               		.loc 1 305 0
 712 03ec 80E0      		ldi r24,0
 713 03ee 90E0      		ldi r25,0
 714 03f0 DC01      		movw r26,r24
 715               	.L30:
 303:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                   SET_Message->InformationBufferLength) ?
 716               		.loc 1 303 0
 717 03f2 89A3      		std Y+33,r24
 718 03f4 9AA3      		std Y+34,r25
 719 03f6 ABA3      		std Y+35,r26
 720 03f8 BCA3      		std Y+36,r27
 721               	.LVL56:
 722 03fa 00C0      		rjmp .L5
 723               	.LVL57:
 724               	.L31:
 300:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			                                                              SET_Message->InformationBufferOffs
 725               		.loc 1 300 0
 726 03fc 89A5      		ldd r24,Y+41
 727 03fe 9AA5      		ldd r25,Y+42
 728 0400 ABA5      		ldd r26,Y+43
 729 0402 BCA5      		ldd r27,Y+44
 730               	.LVL58:
 731 0404 0896      		adiw r24,8
 732 0406 A11D      		adc r26,__zero_reg__
 733 0408 B11D      		adc r27,__zero_reg__
 734               	.LBB71:
 735               	.LBB70:
 461:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 462:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 463:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrPacketFilter = *((uint32_t*)SetData);
 736               		.loc 1 463 0
 737 040a 8C0F      		add r24,r28
 738 040c 9D1F      		adc r25,r29
 739 040e FC01      		movw r30,r24
 740 0410 8589      		ldd r24,Z+21
 741 0412 9689      		ldd r25,Z+22
 742 0414 A789      		ldd r26,Z+23
 743 0416 B08D      		ldd r27,Z+24
 744 0418 FE01      		movw r30,r28
 745 041a E956      		subi r30,105
 746 041c FF4F      		sbci r31,-1
 747 041e 8083      		st Z,r24
 748 0420 9183      		std Z+1,r25
 749 0422 A283      		std Z+2,r26
 750 0424 B383      		std Z+3,r27
 464:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISInterfaceInfo->State.CurrRNDISState = ((RNDISInterfaceInfo->State.CurrPacketFilter) ?
 751               		.loc 1 464 0
 752 0426 82E0      		ldi r24,lo8(2)
 753 0428 3197      		sbiw r30,1
 754 042a 8083      		st Z,r24
 755 042c 00C0      		rjmp .L51
 756               	.LVL59:
 757               	.L48:
 758               	.LBE70:
 759               	.LBE71:
 305:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			break;
 760               		.loc 1 305 0
 761 042e 8BEB      		ldi r24,lo8(-69)
 762 0430 90E0      		ldi r25,0
 763 0432 A0E0      		ldi r26,0
 764 0434 B0EC      		ldi r27,lo8(-64)
 765               	.LVL60:
 766 0436 00C0      		rjmp .L30
 767               	.LVL61:
 768               	.L10:
 308:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 769               		.loc 1 308 0
 770 0438 FE01      		movw r30,r28
 771 043a EB56      		subi r30,107
 772 043c FF4F      		sbci r31,-1
 773 043e 81E0      		ldi r24,lo8(1)
 774 0440 8083      		st Z,r24
 775               	.LVL62:
 312:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->MessageLength   = sizeof(RNDIS_Reset_Complete_t);
 776               		.loc 1 312 0
 777 0442 86E0      		ldi r24,lo8(6)
 778 0444 90E0      		ldi r25,0
 779 0446 A0E0      		ldi r26,0
 780 0448 B0E8      		ldi r27,lo8(-128)
 781 044a 8D8B      		std Y+21,r24
 782 044c 9E8B      		std Y+22,r25
 783 044e AF8B      		std Y+23,r26
 784 0450 B88F      		std Y+24,r27
 313:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->Status          = REMOTE_NDIS_STATUS_SUCCESS;
 785               		.loc 1 313 0
 786 0452 80E1      		ldi r24,lo8(16)
 787 0454 90E0      		ldi r25,0
 788 0456 A0E0      		ldi r26,0
 789 0458 B0E0      		ldi r27,0
 790 045a 898F      		std Y+25,r24
 791 045c 9A8F      		std Y+26,r25
 792 045e AB8F      		std Y+27,r26
 793 0460 BC8F      		std Y+28,r27
 314:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RESET_Response->AddressingReset = 0;
 794               		.loc 1 314 0
 795 0462 1D8E      		std Y+29,__zero_reg__
 796 0464 1E8E      		std Y+30,__zero_reg__
 797 0466 1F8E      		std Y+31,__zero_reg__
 798 0468 18A2      		std Y+32,__zero_reg__
 799               	.LVL63:
 800               	.L52:
 329:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			
 801               		.loc 1 329 0
 802 046a 19A2      		std Y+33,__zero_reg__
 803 046c 1AA2      		std Y+34,__zero_reg__
 804 046e 1BA2      		std Y+35,__zero_reg__
 805 0470 1CA2      		std Y+36,__zero_reg__
 806 0472 00C0      		rjmp .L5
 807               	.LVL64:
 808               	.L4:
 809               	.LBE61:
 810               	.LBE72:
 811               	.LBE75:
  92:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 812               		.loc 1 92 0
 813 0474 8091 0000 		lds r24,USB_ControlRequest
 814 0478 813A      		cpi r24,lo8(-95)
 815 047a 01F0      		breq .+2
 816 047c 00C0      		rjmp .L1
 817               	.LBB76:
 818               	.LBB77:
 819               	.LBB78:
 442:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 820               		.loc 2 442 0
 821 047e 8091 E800 		lds r24,232
 822 0482 877F      		andi r24,lo8(-9)
 823 0484 8093 E800 		sts 232,r24
 824               	.LBE78:
 825               	.LBE77:
  96:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 826               		.loc 1 96 0
 827 0488 CF01      		movw r24,r30
 828 048a 4596      		adiw r24,21
 829               	.LVL65:
  98:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				{
 830               		.loc 1 98 0
 831 048c 418D      		ldd r20,Z+25
 832 048e 528D      		ldd r21,Z+26
 833 0490 638D      		ldd r22,Z+27
 834 0492 748D      		ldd r23,Z+28
 835 0494 452B      		or r20,r21
 836 0496 462B      		or r20,r22
 837 0498 472B      		or r20,r23
 838 049a 01F4      		brne .L33
 100:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 					MessageHeader->MessageLength = 1;
 839               		.loc 1 100 0
 840 049c 158A      		std Z+21,__zero_reg__
 101:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				}
 841               		.loc 1 101 0
 842 049e 41E0      		ldi r20,lo8(1)
 843 04a0 50E0      		ldi r21,0
 844 04a2 60E0      		ldi r22,0
 845 04a4 70E0      		ldi r23,0
 846 04a6 418F      		std Z+25,r20
 847 04a8 528F      		std Z+26,r21
 848 04aa 638F      		std Z+27,r22
 849 04ac 748F      		std Z+28,r23
 850               	.L33:
 104:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 				Endpoint_ClearOUT();
 851               		.loc 1 104 0
 852 04ae 698D      		ldd r22,Y+25
 853 04b0 7A8D      		ldd r23,Y+26
 854 04b2 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 855               	.LVL66:
 856               	.LBB79:
 857               	.LBB80:
 455:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 456:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << TXINI);
 457:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 458:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 459:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 460:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 461:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 462:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 463:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 464:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 465:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 466:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearOUT(void)
 467:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 468:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 469:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 858               		.loc 2 469 0
 859 04b6 8091 E800 		lds r24,232
 860 04ba 8B77      		andi r24,lo8(123)
 861 04bc 8093 E800 		sts 232,r24
 862               	.LBE80:
 863               	.LBE79:
 107:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			}
 864               		.loc 1 107 0
 865 04c0 198E      		std Y+25,__zero_reg__
 866 04c2 1A8E      		std Y+26,__zero_reg__
 867 04c4 1B8E      		std Y+27,__zero_reg__
 868 04c6 1C8E      		std Y+28,__zero_reg__
 869 04c8 00C0      		rjmp .L1
 870               	.LBE76:
 871               		.cfi_endproc
 872               	.LFE65:
 874               		.section	.text.RNDIS_Device_ConfigureEndpoints,"ax",@progbits
 875               	.global	RNDIS_Device_ConfigureEndpoints
 877               	RNDIS_Device_ConfigureEndpoints:
 878               	.LFB66:
 115:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 879               		.loc 1 115 0
 880               		.cfi_startproc
 881               	.LVL67:
 882 0000 0F93      		push r16
 883               	.LCFI4:
 884               		.cfi_def_cfa_offset 3
 885               		.cfi_offset 16, -2
 886 0002 1F93      		push r17
 887               	.LCFI5:
 888               		.cfi_def_cfa_offset 4
 889               		.cfi_offset 17, -3
 890 0004 CF93      		push r28
 891               	.LCFI6:
 892               		.cfi_def_cfa_offset 5
 893               		.cfi_offset 28, -4
 894 0006 DF93      		push r29
 895               	.LCFI7:
 896               		.cfi_def_cfa_offset 6
 897               		.cfi_offset 29, -5
 898               	/* prologue: function */
 899               	/* frame size = 0 */
 900               	/* stack size = 4 */
 901               	.L__stack_usage = 4
 902 0008 EC01      		movw r28,r24
 116:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 903               		.loc 1 116 0
 904 000a FC01      		movw r30,r24
 905 000c 7596      		adiw r30,21
 906 000e 84E4      		ldi r24,lo8(68)
 907 0010 9CE0      		ldi r25,lo8(12)
 908               	.LVL68:
 909 0012 DF01      		movw r26,r30
 910 0014 9C01      		movw r18,r24
 911               		0:
 912 0016 1D92      		st X+,__zero_reg__
 913 0018 2150      		subi r18,1
 914 001a 3040      		sbci r19,0
 915 001c 01F4      		brne 0b
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 916               		.loc 1 118 0
 917 001e 8A81      		ldd r24,Y+2
 918 0020 9B81      		ldd r25,Y+3
 919 0022 2C81      		ldd r18,Y+4
 920 0024 10E0      		ldi r17,0
 921 0026 2111      		cpse r18,__zero_reg__
 922 0028 14E0      		ldi r17,lo8(4)
 923               	.L54:
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 924               		.loc 1 118 0 is_stmt 0 discriminator 11
 925 002a 0981      		ldd r16,Y+1
 926               	.LVL69:
 927               	.LBB99:
 928               	.LBB100:
 470:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 471:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					UEINTX &= ~(1 << RXOUTI);	
 472:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif
 473:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 474:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 475:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 476:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 477:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 478:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborted and the host can begin its own recovery sequence.
 479:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 480:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 481:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 482:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint.
 483:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 484:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 485:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 486:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 487:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_StallTransaction(void)
 488:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 489:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQ);
 490:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 491:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 492:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 493:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 494:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 495:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 496:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 497:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ClearStall(void)
 498:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 499:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << STALLRQC);
 500:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 501:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 502:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 503:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 504:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPacketManagement
 505:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 506:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
 507:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 508:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 509:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_IsStalled(void)
 510:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 511:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 512:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 513:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 514:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 515:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 516:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_ResetDataToggle(void)
 517:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 518:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECONX |= (1 << RSTDT);
 519:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 520:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 521:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Determines the currently selected endpoint's direction.
 522:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 523:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
 524:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 525:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 526:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 527:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 528:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (UECFG0X & ENDPOINT_DIR_IN);
 529:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 530:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 531:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Sets the direction of the currently selected endpoint.
 532:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 533:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
 534:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 535:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 536:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 537:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 538:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
 539:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 540:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 541:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 542:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 543:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 544:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 545:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 546:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 547:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 548:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_Read_Byte(void)
 549:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 550:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return UEDATX;
 551:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 552:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 553:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints.
 554:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 555:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 556:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 557:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
 558:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 559:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
 560:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Byte(const uint8_t Byte)
 561:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 562:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = Byte;
 563:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 564:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 565:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 566:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 567:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 568:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 569:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void) ATTR_ALWAYS_INLINE;
 570:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Byte(void)
 571:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 572:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 573:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 574:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 575:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 576:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 577:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 578:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 579:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 580:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 581:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 582:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 583:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 584:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 585:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_LE(void)
 586:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 587:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 588:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 589:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 590:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 591:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 592:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 593:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 594:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 595:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 596:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 597:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 598:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 599:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 600:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 601:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 602:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 603:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 604:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next word in the currently selected endpoint's FIFO buffer.
 605:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 606:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 607:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint16_t Endpoint_Read_Word_BE(void)
 608:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 609:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 610:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 611:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint16_t Word;
 612:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[2];
 613:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 614:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 615:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 616:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 617:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 618:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.Word;
 619:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 620:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 621:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 622:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 623:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 624:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 625:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 626:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 627:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 628:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 629:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
 630:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 631:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 632:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 633:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 634:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 635:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes two bytes to the currently selected endpoint's bank in big endian format, for IN
 636:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 637:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 638:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 639:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 640:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
 641:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 642:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word) ATTR_ALWAYS_INLINE;
 643:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_Word_BE(const uint16_t Word)
 644:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 645:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word >> 8);
 646:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (Word & 0xFF);
 647:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 648:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 649:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints.
 650:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 651:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 652:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 653:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void) ATTR_ALWAYS_INLINE;
 654:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_Word(void)
 655:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 656:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 657:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 658:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 659:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 660:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 661:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 662:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in little endian format, for OU
 663:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 664:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 665:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 666:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 667:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 668:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 669:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 670:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_LE(void)
 671:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 672:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 673:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 674:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 675:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 676:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 677:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 678:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 679:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 680:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 681:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 682:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 683:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 684:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 685:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 686:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads four bytes from the currently selected endpoint's bank in big endian format, for OUT
 687:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 688:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 689:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 690:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 691:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Next double word in the currently selected endpoint's FIFO buffer.
 692:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 693:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 694:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint32_t Endpoint_Read_DWord_BE(void)
 695:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 696:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				union
 697:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
 698:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint32_t DWord;
 699:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					uint8_t  Bytes[4];
 700:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				} Data;
 701:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 702:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[3] = UEDATX;
 703:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[2] = UEDATX;
 704:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[1] = UEDATX;
 705:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Data.Bytes[0] = UEDATX;
 706:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 707:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Data.DWord;
 708:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 709:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 710:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in little endian format, for IN
 711:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 712:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 713:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 714:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 715:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 716:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 717:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 718:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_LE(const uint32_t DWord)
 719:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 720:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 721:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 722:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 723:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 724:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 725:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 726:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes four bytes to the currently selected endpoint's bank in big endian format, for IN
 727:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  direction endpoints.
 728:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 729:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 730:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 731:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
 732:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 733:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
 734:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
 735:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 736:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 24);
 737:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 16);
 738:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord >> 8);
 739:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				UEDATX = (DWord &  0xFF);
 740:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 741:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 742:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Discards four bytes from the currently selected endpoint's bank, for OUT direction endpoints
 743:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 744:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointPrimitiveRW
 745:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 746:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void) ATTR_ALWAYS_INLINE;
 747:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline void Endpoint_Discard_DWord(void)
 748:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
 749:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t Dummy;
 750:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
 751:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 752:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 753:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 754:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				Dummy = UEDATX;
 755:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 756:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 757:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* External Variables: */
 758:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Global indicating the maximum packet size of the default control endpoint located at address
 759:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  0 in the device. This value is set to the value indicated in the device descriptor in the us
 760:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  project once the USB interface is initialized into device mode.
 761:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 762:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If space is an issue, it is possible to fix this to a static value by defining the control
 763:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint size in the FIXED_CONTROL_ENDPOINT_SIZE token passed to the compiler in the makefil
 764:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  via the -D switch. When a fixed control endpoint size is used, the size is no longer dynamic
 765:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  read from the descriptors at runtime and instead fixed to the given value. When used, it is
 766:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  important that the descriptor control endpoint size value matches the size given as the
 767:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  FIXED_CONTROL_ENDPOINT_SIZE token - it is recommended that the FIXED_CONTROL_ENDPOINT_SIZE t
 768:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  be used in the descriptors to ensure this.
 769:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 770:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This variable should be treated as read-only in the user application, and never manual
 771:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        changed in value.
 772:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 773:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 774:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				extern uint8_t USB_ControlEndpointSize;
 775:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 776:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define USB_ControlEndpointSize FIXED_CONTROL_ENDPOINT_SIZE
 777:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 778:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 779:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
 780:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if !defined(NO_STREAM_CALLBACKS) || defined(__DOXYGEN__)
 781:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM     , StreamCallbackPtr_t Callback
 782:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
 783:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define __CALLBACK_PARAM
 784:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
 785:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		
 786:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 787:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  and banking mode. Endpoints should be allocated in ascending order by their address in the
 788:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  device (i.e. endpoint 1 should be configured before endpoint 2 and so on) to prevent fragmen
 789:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  of the USB FIFO memory.
 790:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 791:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The endpoint type may be one of the EP_TYPE_* macros listed in LowLevel.h and the direction
 792:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  may be either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT_DIR_IN.
 793:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 794:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The bank size must indicate the maximum packet size that the endpoint can handle. Different
 795:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  endpoint numbers can handle different maximum packet sizes - refer to the chosen USB AVR's
 796:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  datasheet to determine the maximum bank size for each endpoint.
 797:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 798:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  The banking mode may be either \ref ENDPOINT_BANK_SINGLE or \ref ENDPOINT_BANK_DOUBLE.
 799:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 800:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 801:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        it is automatically configured by the library internally.
 802:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
 803:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 804:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine will select the specified endpoint, and the endpoint will remain selected
 805:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        once the routine completes regardless of if the endpoint configuration succeeds.
 806:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 807:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return Boolean true if the configuration succeeded, false otherwise.
 808:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 809:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			bool Endpoint_ConfigureEndpoint(const uint8_t  Number,
 810:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Type,
 811:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Direction,
 812:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint16_t Size,
 813:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                const uint8_t Banks);
 814:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 815:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Spin-loops until the currently selected non-control endpoint is ready for the next packet of
 816:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  to be read or written to it.
 817:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 818:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be called on CONTROL type endpoints.
 819:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 820:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointRW
 821:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 822:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_WaitUntilReady_ErrorCodes_t enum.
 823:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 824:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_WaitUntilReady(void);
 825:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
 826:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Completes the status stage of a control transfer on a CONTROL type endpoint automatically,
 827:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  with respect to the data direction. This is a convenience function which can be used to
 828:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  simplify user control request handling.
 829:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 830:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			void Endpoint_ClearStatusStage(void);
 831:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 832:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads and discards the given number of bytes from the endpoint from the given buffer,
 833:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 834:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 835:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 836:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the next
 837:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  packet is ready, allowing for early aborts of stream transfers.
 838:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 839:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 840:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 841:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 842:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 843:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 844:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 845:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 846:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 847:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to send via the currently selected endpoint.
 848:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 849:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 850:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 851:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 852:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Discard_Stream(uint16_t Length
 853:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM);
 854:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 855:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in little endian,
 856:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 857:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 858:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 859:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 860:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 861:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 862:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 863:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 864:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 865:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 866:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 867:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 868:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 869:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 870:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 871:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 872:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 873:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 874:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 875:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 876:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_LE(const void* Buffer,
 877:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 878:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 879:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 880:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_LE().
 881:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 882:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 883:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 884:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 885:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 886:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 887:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 888:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 889:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 890:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_LE(const void* Buffer,
 891:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 892:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 893:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 894:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_LE().
 895:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 896:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 897:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 898:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 899:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 900:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 901:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 902:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 903:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 904:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 905:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 906:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_LE(const void* Buffer,
 907:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 908:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 909:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 910:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the endpoint from the given buffer in big endian,
 911:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The last packet filled is not automatically sent
 912:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  the user is responsible for manually sending the last written packet to the host via the
 913:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ref Endpoint_ClearIN() macro. Between each USB packet, the given stream callback function
 914:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is executed repeatedly until the endpoint is ready to accept the next packet, allowing for e
 915:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  aborts of stream transfers.
 916:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 917:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 918:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 919:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 920:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 921:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 922:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 923:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 924:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 925:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 926:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 927:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 928:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 929:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 930:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 931:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Stream_BE(const void* Buffer,
 932:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
 933:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 934:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 935:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Stream_BE().
 936:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 937:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 938:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 939:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 940:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 941:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 942:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 943:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 944:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 945:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_EStream_BE(const void* Buffer,
 946:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 947:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 948:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 949:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Stream_BE().
 950:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 951:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
 952:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 953:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 954:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 955:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer    Pointer to the source data buffer to read from.
 956:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length    Number of bytes to read for the currently selected endpoint into the bu
 957:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Callback  Name of a callback routine to call between successive USB packet transf
 958:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 959:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 960:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 961:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_PStream_BE(const void* Buffer,
 962:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  uint16_t Length
 963:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                  __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 964:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 965:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in little endian,
 966:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
 967:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
 968:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
 969:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
 970:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
 971:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 972:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
 973:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
 974:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
 975:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 976:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
 977:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 978:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 979:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 980:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
 981:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 982:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 983:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 984:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 985:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
 986:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_LE(void* Buffer,
 987:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
 988:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
 989:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
 990:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_LE().
 991:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 992:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
 993:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 994:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
 995:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
 996:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
 997:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
 998:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
 999:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1000:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_LE(void* Buffer,
1001:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1002:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1003:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1004:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the endpoint from the given buffer in big endian,
1005:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The last packet is not automatically
1006:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarded once the remaining bytes has been read; the user is responsible for manually
1007:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding the last packet from the host via the \ref Endpoint_ClearOUT() macro. Between
1008:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  each USB packet, the given stream callback function is executed repeatedly until the endpoin
1009:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  is ready to accept the next packet, allowing for early aborts of stream transfers.
1010:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1011:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *	The callback routine should be created according to the information in \ref Group_StreamCallb
1012:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  If the token NO_STREAM_CALLBACKS is passed via the -D option to the compiler, stream callbac
1013:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  disabled and this function has the Callback parameter omitted.
1014:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1015:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should not be used on CONTROL type endpoints.
1016:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1017:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1018:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1019:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to.
1020:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1021:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1022:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1023:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1024:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1025:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Stream_BE(void* Buffer,
1026:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                uint16_t Length
1027:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1028:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1029:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Stream_BE().
1030:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1031:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1032:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1033:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer    Pointer to the destination data buffer to write to, located in EEPROM 
1034:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length    Number of bytes to send via the currently selected endpoint.
1035:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Callback  Name of a callback routine to call between successive USB packet trans
1036:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1037:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_Stream_RW_ErrorCodes_t enum.
1038:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1039:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_EStream_BE(void* Buffer,
1040:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 uint16_t Length
1041:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                 __CALLBACK_PARAM) ATTR_NON_NULL_PTR_ARG(1);
1042:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1043:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in littl
1044:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1045:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1046:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1047:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1048:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1049:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1050:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1051:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1052:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1053:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1054:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1055:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1056:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1057:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1058:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1059:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1060:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1061:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1062:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1063:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1064:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_LE(const void* Buffer,
1065:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1066:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1067:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of Endpoint_Write_Control_Stream_LE.
1068:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1069:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1070:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1071:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1072:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1073:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1074:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1075:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1076:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1077:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1078:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1079:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1080:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1081:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1082:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1083:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1084:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1085:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_LE(const void* Buffer,
1086:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1087:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1088:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_LE().
1089:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1090:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1091:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1092:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1093:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1094:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1095:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1096:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1097:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1098:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1099:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1100:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1101:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1102:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1103:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1104:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1105:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1106:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1107:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1108:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_LE(const void* Buffer,
1109:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1110:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1111:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Writes the given number of bytes to the CONTROL type endpoint from the given buffer in big e
1112:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  sending full packets to the host as needed. The host OUT acknowledgement is not automaticall
1113:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  in both failure and success states; the user is responsible for manually clearing the setup 
1114:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  finalize the transfer via the \ref Endpoint_ClearOUT() macro.
1115:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1116:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1117:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1118:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1119:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1120:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1121:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1122:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1123:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1124:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1125:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1126:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1127:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1128:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1129:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1130:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1131:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1132:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_Stream_BE(const void* Buffer,
1133:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1134:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1135:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1136:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1137:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1138:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1139:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1140:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1141:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1142:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1143:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1144:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1145:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1146:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1147:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1148:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1149:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1150:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1151:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1152:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1153:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_EStream_BE(const void* Buffer,
1154:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1155:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1156:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** FLASH buffer source version of \ref Endpoint_Write_Control_Stream_BE().
1157:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1158:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \pre The FLASH data must be located in the first 64KB of FLASH for this function to work cor
1159:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1160:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1161:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1162:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1163:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1164:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1165:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1166:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1167:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1168:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1169:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1170:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1171:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Buffer  Pointer to the source data buffer to read from.
1172:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in] Length  Number of bytes to read for the currently selected endpoint into the buff
1173:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1174:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1175:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1176:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Write_Control_PStream_BE(const void* Buffer,
1177:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                          uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1178:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1179:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in little en
1180:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1181:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1182:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1183:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1184:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1185:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1186:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1187:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1188:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1189:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1190:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1191:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1192:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1193:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1194:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1195:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1196:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1197:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1198:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1199:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1200:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_LE(void* Buffer,
1201:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1202:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1203:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_LE().
1204:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1205:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1206:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1207:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1208:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1209:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1210:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1211:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1212:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1213:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1214:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1215:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1216:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1217:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1218:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1219:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1220:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1221:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_LE(void* Buffer,
1222:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1223:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1224:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** Reads the given number of bytes from the CONTROL endpoint from the given buffer in big endia
1225:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  discarding fully read packets from the host as needed. The device IN acknowledgement is not
1226:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  automatically sent after success or failure states; the user is responsible for manually sen
1227:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  setup IN to finalize the transfer via the \ref Endpoint_ClearIN() macro.
1228:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1229:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1230:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1231:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1232:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1233:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1234:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1235:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1236:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1237:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1238:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1239:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1240:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1241:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1242:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1243:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1244:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1245:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_Stream_BE(void* Buffer,
1246:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                        uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1247:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1248:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			/** EEPROM buffer source version of \ref Endpoint_Read_Control_Stream_BE().
1249:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1250:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This function automatically clears the control transfer's status stage. Do not manuall
1251:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        to clear the status stage when using this routine in a control transaction.
1252:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *        \n\n
1253:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1254:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \note This routine should only be used on CONTROL type endpoints.
1255:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1256:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \warning Unlike the standard stream read/write commands, the control stream commands cannot 
1257:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *           together; i.e. the entire stream data must be read or written at the one time.
1258:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1259:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \ingroup Group_EndpointStreamRW
1260:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1261:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[out] Buffer  Pointer to the destination data buffer to write to.
1262:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \param[in]  Length  Number of bytes to send via the currently selected endpoint.
1263:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *
1264:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 *  \return A value from the \ref Endpoint_ControlStream_RW_ErrorCodes_t enum.
1265:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			 */
1266:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_Read_Control_EStream_BE(void* Buffer,
1267:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                         uint16_t Length) ATTR_NON_NULL_PTR_ARG(1);
1268:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1269:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	/* Private Interface - For use in library only: */
1270:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 	#if !defined(__DOXYGEN__)
1271:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Macros: */
1272:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE(n)               _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## n)
1273:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE2(details)        _ENDPOINT_GET_MAXSIZE3(details)
1274:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_MAXSIZE3(maxsize, db)    maxsize
1275:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1276:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK(n)            _ENDPOINT_GET_DOUBLEBANK2(ENDPOINT_DETAILS_EP ## 
1277:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK2(details)     _ENDPOINT_GET_DOUBLEBANK3(details)
1278:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define _ENDPOINT_GET_DOUBLEBANK3(maxsize, db) db
1279:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1280:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
1281:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1282:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               256, true
1283:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  true
1284:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1285:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true
1286:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP5               64,  true
1287:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP6               64,  true
1288:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#else
1289:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP0               64,  true
1290:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP1               64,  false
1291:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP2               64,  false
1292:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP3               64,  true
1293:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#define ENDPOINT_DETAILS_EP4               64,  true			
1294:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#endif
1295:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1296:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			#define Endpoint_ConfigureEndpoint(Number, Type, Direction, Size, Banks)                        
1297:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                     (__builtin_constant_p(Size) ? Endpoint_ConfigureEndpointStatic((Number),   
1298:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Type),     
1299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    (Direction),
1300:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                    Size, Banks)
1301:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                   Endpoint_ConfigureEndpointDynamic((Number),  
1302:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Type),    
1303:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     (Direction)
1304:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                                                     Size, Banks
1305:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1306:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Function Prototypes: */
1307:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			void    Endpoint_ClearEndpoints(void);
1308:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size);
1309:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			bool    Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
1310:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG0XData,
1311:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                       const uint8_t UECFG1XData);			
1312:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1313:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 		/* Inline Functions: */
1314:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
1315:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
1316:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1317:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint8_t  MaskVal    = 0;
1318:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				uint16_t CheckBytes = 8;
1319:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
1320:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				while (CheckBytes < Bytes)
1321:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				{
1322:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					MaskVal++;
1323:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 					CheckBytes <<= 1;
1324:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				}
1325:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				
1326:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return (MaskVal << EPSIZE0);
1327:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
1328:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			
1329:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpointStatic(const uint8_t Number,
1330:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Type,
1331:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Direction,
1332:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint16_t Size,
1333:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                    const uint8_t Banks)
1334:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1335:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
1336:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
1337:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
1338:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 
1339:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			static inline bool Endpoint_ConfigureEndpointDynamic(const uint8_t Number,
1340:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Type,
1341:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Direction,
1342:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint16_t Size,
1343:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			                                                     const uint8_t Banks)
1344:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			{
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
1346:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 929               		.loc 2 1346 0 is_stmt 1 discriminator 11
 930 002c 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 931               	.LVL70:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 932               		.loc 2 1345 0 discriminator 11
 933 0030 812B      		or r24,r17
 934 0032 482F      		mov r20,r24
 935 0034 4260      		ori r20,lo8(2)
 936 0036 61E8      		ldi r22,lo8(-127)
 937 0038 802F      		mov r24,r16
 938 003a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 939               	.LVL71:
 940               	.LBE100:
 941               	.LBE99:
 118:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 							         ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.DataINEndpointSize,
 942               		.loc 1 118 0 discriminator 11
 943 003e 8823      		tst r24
 944 0040 01F0      		breq .L56
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 945               		.loc 1 125 0
 946 0042 8E81      		ldd r24,Y+6
 947 0044 9F81      		ldd r25,Y+7
 948 0046 2885      		ldd r18,Y+8
 949 0048 10E0      		ldi r17,0
 950 004a 2111      		cpse r18,__zero_reg__
 951 004c 14E0      		ldi r17,lo8(4)
 952               	.L57:
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 953               		.loc 1 125 0 is_stmt 0 discriminator 11
 954 004e 0D81      		ldd r16,Y+5
 955               	.LVL72:
 956               	.LBB101:
 957               	.LBB102:
 958               		.loc 2 1346 0 is_stmt 1 discriminator 11
 959 0050 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 960               	.LVL73:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 961               		.loc 2 1345 0 discriminator 11
 962 0054 812B      		or r24,r17
 963 0056 482F      		mov r20,r24
 964 0058 4260      		ori r20,lo8(2)
 965 005a 60E8      		ldi r22,lo8(-128)
 966 005c 802F      		mov r24,r16
 967 005e 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 968               	.LVL74:
 969               	.LBE102:
 970               	.LBE101:
 125:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_OUT, RNDISInterfaceInfo->Config.DataOUTEndpointSize,
 971               		.loc 1 125 0 discriminator 11
 972 0062 8823      		tst r24
 973 0064 01F0      		breq .L56
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 974               		.loc 1 132 0
 975 0066 8A85      		ldd r24,Y+10
 976 0068 9B85      		ldd r25,Y+11
 977 006a 2C85      		ldd r18,Y+12
 978 006c 10E0      		ldi r17,0
 979 006e 2111      		cpse r18,__zero_reg__
 980 0070 14E0      		ldi r17,lo8(4)
 981               	.L59:
 132:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	                                 ENDPOINT_DIR_IN, RNDISInterfaceInfo->Config.NotificationEndpointS
 982               		.loc 1 132 0 is_stmt 0 discriminator 11
 983 0072 C985      		ldd r28,Y+9
 984               	.LVL75:
 985               	.LBB103:
 986               	.LBB104:
 987               		.loc 2 1346 0 is_stmt 1 discriminator 11
 988 0074 0E94 0000 		call Endpoint_BytesToEPSizeMaskDynamic
 989               	.LVL76:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 990               		.loc 2 1345 0 discriminator 11
 991 0078 812B      		or r24,r17
 992 007a 482F      		mov r20,r24
 993 007c 4260      		ori r20,lo8(2)
 994 007e 61EC      		ldi r22,lo8(-63)
 995 0080 8C2F      		mov r24,r28
 996               	/* epilogue start */
 997               	.LBE104:
 998               	.LBE103:
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 999               		.loc 1 140 0 discriminator 11
 1000 0082 DF91      		pop r29
 1001 0084 CF91      		pop r28
 1002               	.LVL77:
 1003 0086 1F91      		pop r17
 1004               	.LVL78:
 1005 0088 0F91      		pop r16
 1006               	.LBB106:
 1007               	.LBB105:
1345:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic
 1008               		.loc 2 1345 0 discriminator 11
 1009 008a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1010               	.LVL79:
 1011               	.L56:
 1012               	.LBE105:
 1013               	.LBE106:
 140:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1014               		.loc 1 140 0
 1015 008e 80E0      		ldi r24,0
 1016               	/* epilogue start */
 1017 0090 DF91      		pop r29
 1018 0092 CF91      		pop r28
 1019               	.LVL80:
 1020 0094 1F91      		pop r17
 1021 0096 0F91      		pop r16
 1022 0098 0895      		ret
 1023               		.cfi_endproc
 1024               	.LFE66:
 1026               		.section	.rodata
 1027               	.LC0:
 1028 0000 A1        		.byte	-95
 1029 0001 01        		.byte	1
 1030 0002 0000      		.word	0
 1031 0004 0000      		.word	0
 1032 0006 0000      		.word	0
 1033               		.section	.text.RNDIS_Device_USBTask,"ax",@progbits
 1034               	.global	RNDIS_Device_USBTask
 1036               	RNDIS_Device_USBTask:
 1037               	.LFB67:
 143:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 1038               		.loc 1 143 0
 1039               		.cfi_startproc
 1040               	.LVL81:
 1041 0000 EF92      		push r14
 1042               	.LCFI8:
 1043               		.cfi_def_cfa_offset 3
 1044               		.cfi_offset 14, -2
 1045 0002 FF92      		push r15
 1046               	.LCFI9:
 1047               		.cfi_def_cfa_offset 4
 1048               		.cfi_offset 15, -3
 1049 0004 0F93      		push r16
 1050               	.LCFI10:
 1051               		.cfi_def_cfa_offset 5
 1052               		.cfi_offset 16, -4
 1053 0006 1F93      		push r17
 1054               	.LCFI11:
 1055               		.cfi_def_cfa_offset 6
 1056               		.cfi_offset 17, -5
 1057 0008 CF93      		push r28
 1058               	.LCFI12:
 1059               		.cfi_def_cfa_offset 7
 1060               		.cfi_offset 28, -6
 1061 000a DF93      		push r29
 1062               	.LCFI13:
 1063               		.cfi_def_cfa_offset 8
 1064               		.cfi_offset 29, -7
 1065 000c CDB7      		in r28,__SP_L__
 1066 000e DEB7      		in r29,__SP_H__
 1067               	.LCFI14:
 1068               		.cfi_def_cfa_register 28
 1069 0010 AC97      		sbiw r28,44
 1070               	.LCFI15:
 1071               		.cfi_def_cfa_offset 52
 1072 0012 0FB6      		in __tmp_reg__,__SREG__
 1073 0014 F894      		cli
 1074 0016 DEBF      		out __SP_H__,r29
 1075 0018 0FBE      		out __SREG__,__tmp_reg__
 1076 001a CDBF      		out __SP_L__,r28
 1077               	/* prologue: function */
 1078               	/* frame size = 44 */
 1079               	/* stack size = 50 */
 1080               	.L__stack_usage = 50
 144:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	  return;
 1081               		.loc 1 144 0
 1082 001c 2EB3      		in r18,0x1e
 1083 001e 2430      		cpi r18,lo8(4)
 1084 0020 01F0      		breq .+2
 1085 0022 00C0      		rjmp .L66
 1086 0024 8C01      		movw r16,r24
 1087               	.LVL82:
 149:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1088               		.loc 1 149 0
 1089 0026 DC01      		movw r26,r24
 1090 0028 1996      		adiw r26,9
 1091 002a 8C91      		ld r24,X
 1092               	.LVL83:
 1093               	.LBB107:
 1094               	.LBB108:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1095               		.loc 2 299 0
 1096 002c 8093 E900 		sts 233,r24
 1097               	.LVL84:
 1098               	.LBE108:
 1099               	.LBE107:
 1100               	.LBB109:
 1101               	.LBB110:
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1102               		.loc 2 405 0
 1103 0030 8091 E800 		lds r24,232
 1104               	.LBE110:
 1105               	.LBE109:
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1106               		.loc 1 151 0
 1107 0034 80FF      		sbrs r24,0
 1108 0036 00C0      		rjmp .L69
 151:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1109               		.loc 1 151 0 is_stmt 0 discriminator 1
 1110 0038 7801      		movw r14,r16
 1111 003a B5E9      		ldi r27,-107
 1112 003c EB0E      		add r14,r27
 1113 003e F11C      		adc r15,__zero_reg__
 1114 0040 F701      		movw r30,r14
 1115 0042 8081      		ld r24,Z
 1116 0044 8823      		tst r24
 1117 0046 01F0      		breq .L69
 1118               	.LBB111:
 153:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 1119               		.loc 1 153 0 is_stmt 1
 1120 0048 88E0      		ldi r24,lo8(8)
 1121 004a E0E0      		ldi r30,lo8(.LC0)
 1122 004c F0E0      		ldi r31,hi8(.LC0)
 1123 004e DE01      		movw r26,r28
 1124 0050 1196      		adiw r26,1
 1125               		0:
 1126 0052 0190      		ld r0,Z+
 1127 0054 0D92      		st X+,r0
 1128 0056 8A95      		dec r24
 1129 0058 01F4      		brne 0b
 162:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1130               		.loc 1 162 0
 1131 005a 50E0      		ldi r21,0
 1132 005c 40E0      		ldi r20,0
 1133 005e 68E0      		ldi r22,lo8(8)
 1134 0060 70E0      		ldi r23,0
 1135 0062 CE01      		movw r24,r28
 1136 0064 0196      		adiw r24,1
 1137 0066 0E94 0000 		call Endpoint_Write_Stream_LE
 1138               	.LVL85:
 1139               	.LBB112:
 1140               	.LBB113:
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1141               		.loc 2 454 0
 1142 006a 8091 E800 		lds r24,232
 1143 006e 8E77      		andi r24,lo8(126)
 1144 0070 8093 E800 		sts 232,r24
 1145               	.LBE113:
 1146               	.LBE112:
 166:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	}
 1147               		.loc 1 166 0
 1148 0074 D701      		movw r26,r14
 1149 0076 1C92      		st X,__zero_reg__
 1150               	.L69:
 1151               	.LBE111:
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1152               		.loc 1 169 0
 1153 0078 F801      		movw r30,r16
 1154 007a EA56      		subi r30,106
 1155 007c FF4F      		sbci r31,-1
 1156 007e 8081      		ld r24,Z
 1157 0080 8230      		cpi r24,lo8(2)
 1158 0082 01F4      		brne .L66
 169:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 	{
 1159               		.loc 1 169 0 is_stmt 0 discriminator 1
 1160 0084 F801      		movw r30,r16
 1161 0086 818D      		ldd r24,Z+25
 1162 0088 928D      		ldd r25,Z+26
 1163 008a A38D      		ldd r26,Z+27
 1164 008c B48D      		ldd r27,Z+28
 1165 008e 892B      		or r24,r25
 1166 0090 8A2B      		or r24,r26
 1167 0092 8B2B      		or r24,r27
 1168 0094 01F4      		brne .L66
 1169               	.LBB114:
 173:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1170               		.loc 1 173 0 is_stmt 1
 1171 0096 8581      		ldd r24,Z+5
 1172               	.LVL86:
 1173               	.LBB115:
 1174               	.LBB116:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1175               		.loc 2 299 0
 1176 0098 8093 E900 		sts 233,r24
 1177               	.LVL87:
 1178               	.LBE116:
 1179               	.LBE115:
 1180               	.LBB117:
 1181               	.LBB118:
 417:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1182               		.loc 2 417 0
 1183 009c 8091 E800 		lds r24,232
 1184               	.LBE118:
 1185               	.LBE117:
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1186               		.loc 1 175 0
 1187 00a0 82FF      		sbrs r24,2
 1188 00a2 00C0      		rjmp .L71
 175:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1189               		.loc 1 175 0 is_stmt 0 discriminator 1
 1190 00a4 7801      		movw r14,r16
 1191 00a6 F7E8      		ldi r31,-121
 1192 00a8 EF1A      		sub r14,r31
 1193 00aa F9EF      		ldi r31,-7
 1194 00ac FF0A      		sbc r15,r31
 1195 00ae D701      		movw r26,r14
 1196 00b0 8C91      		ld r24,X
 1197 00b2 8111      		cpse r24,__zero_reg__
 1198 00b4 00C0      		rjmp .L71
 177:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1199               		.loc 1 177 0 is_stmt 1
 1200 00b6 50E0      		ldi r21,0
 1201 00b8 40E0      		ldi r20,0
 1202 00ba 6CE2      		ldi r22,lo8(44)
 1203 00bc 70E0      		ldi r23,0
 1204 00be CE01      		movw r24,r28
 1205 00c0 0196      		adiw r24,1
 1206 00c2 0E94 0000 		call Endpoint_Read_Stream_LE
 1207               	.LVL88:
 179:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			{
 1208               		.loc 1 179 0
 1209 00c6 6D85      		ldd r22,Y+13
 1210 00c8 7E85      		ldd r23,Y+14
 1211 00ca 8F85      		ldd r24,Y+15
 1212 00cc 9889      		ldd r25,Y+16
 1213 00ce 6D3D      		cpi r22,-35
 1214 00d0 B5E0      		ldi r27,5
 1215 00d2 7B07      		cpc r23,r27
 1216 00d4 8105      		cpc r24,__zero_reg__
 1217 00d6 9105      		cpc r25,__zero_reg__
 1218 00d8 00F0      		brlo .L72
 1219               	.LBB119:
 1220               	.LBB120:
 489:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1221               		.loc 2 489 0
 1222 00da 8091 EB00 		lds r24,235
 1223 00de 8062      		ori r24,lo8(32)
 1224 00e0 8093 EB00 		sts 235,r24
 1225               	.LVL89:
 1226               	.L66:
 1227               	/* epilogue start */
 1228               	.LBE120:
 1229               	.LBE119:
 1230               	.LBE114:
 212:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1231               		.loc 1 212 0
 1232 00e4 AC96      		adiw r28,44
 1233 00e6 0FB6      		in __tmp_reg__,__SREG__
 1234 00e8 F894      		cli
 1235 00ea DEBF      		out __SP_H__,r29
 1236 00ec 0FBE      		out __SREG__,__tmp_reg__
 1237 00ee CDBF      		out __SP_L__,r28
 1238 00f0 DF91      		pop r29
 1239 00f2 CF91      		pop r28
 1240 00f4 1F91      		pop r17
 1241 00f6 0F91      		pop r16
 1242 00f8 FF90      		pop r15
 1243 00fa EF90      		pop r14
 1244 00fc 0895      		ret
 1245               	.LVL90:
 1246               	.L72:
 1247               	.LBB129:
 185:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1248               		.loc 1 185 0
 1249 00fe 50E0      		ldi r21,0
 1250 0100 40E0      		ldi r20,0
 1251 0102 C801      		movw r24,r16
 1252 0104 8556      		subi r24,101
 1253 0106 9F4F      		sbci r25,-1
 1254 0108 0E94 0000 		call Endpoint_Read_Stream_LE
 1255               	.LVL91:
 1256               	.LBB121:
 1257               	.LBB122:
 469:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1258               		.loc 2 469 0
 1259 010c 8091 E800 		lds r24,232
 1260 0110 8B77      		andi r24,lo8(123)
 1261 0112 8093 E800 		sts 232,r24
 1262               	.LBE122:
 1263               	.LBE121:
 189:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1264               		.loc 1 189 0
 1265 0116 8D85      		ldd r24,Y+13
 1266 0118 9E85      		ldd r25,Y+14
 1267 011a F801      		movw r30,r16
 1268 011c E958      		subi r30,-119
 1269 011e F94F      		sbci r31,-7
 1270 0120 9183      		std Z+1,r25
 1271 0122 8083      		st Z,r24
 191:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 1272               		.loc 1 191 0
 1273 0124 81E0      		ldi r24,lo8(1)
 1274 0126 F701      		movw r30,r14
 1275 0128 8083      		st Z,r24
 1276               	.L71:
 194:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		
 1277               		.loc 1 194 0
 1278 012a D801      		movw r26,r16
 1279 012c 1196      		adiw r26,1
 1280 012e 8C91      		ld r24,X
 1281               	.LVL92:
 1282               	.LBB123:
 1283               	.LBB124:
 299:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#endif			
 1284               		.loc 2 299 0
 1285 0130 8093 E900 		sts 233,r24
 1286               	.LVL93:
 1287               	.LBE124:
 1288               	.LBE123:
 1289               	.LBB125:
 1290               	.LBB126:
 405:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 			}
 1291               		.loc 2 405 0
 1292 0134 8091 E800 		lds r24,232
 1293               	.LBE126:
 1294               	.LBE125:
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1295               		.loc 1 196 0
 1296 0138 80FF      		sbrs r24,0
 1297 013a 00C0      		rjmp .L66
 196:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		{
 1298               		.loc 1 196 0 is_stmt 0 discriminator 1
 1299 013c 7801      		movw r14,r16
 1300 013e B8EA      		ldi r27,-88
 1301 0140 EB1A      		sub r14,r27
 1302 0142 B3EF      		ldi r27,-13
 1303 0144 FB0A      		sbc r15,r27
 1304 0146 F701      		movw r30,r14
 1305 0148 8081      		ld r24,Z
 1306 014a 8823      		tst r24
 1307 014c 01F0      		breq .L66
 198:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1308               		.loc 1 198 0 is_stmt 1
 1309 014e FE01      		movw r30,r28
 1310 0150 7196      		adiw r30,17
 1311 0152 8CE1      		ldi r24,lo8(28)
 1312 0154 DF01      		movw r26,r30
 1313               		0:
 1314 0156 1D92      		st X+,__zero_reg__
 1315 0158 8A95      		dec r24
 1316 015a 01F4      		brne 0b
 200:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.MessageLength = (sizeof(RNDIS_Packet_Message_t) + RNDISInterfaceInfo->State.Fr
 1317               		.loc 1 200 0
 1318 015c 81E0      		ldi r24,lo8(1)
 1319 015e 90E0      		ldi r25,0
 1320 0160 A0E0      		ldi r26,0
 1321 0162 B0E0      		ldi r27,0
 1322 0164 8983      		std Y+1,r24
 1323 0166 9A83      		std Y+2,r25
 1324 0168 AB83      		std Y+3,r26
 1325 016a BC83      		std Y+4,r27
 201:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataOffset    = (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_
 1326               		.loc 1 201 0
 1327 016c F801      		movw r30,r16
 1328 016e EA5A      		subi r30,-86
 1329 0170 F34F      		sbci r31,-13
 1330 0172 8081      		ld r24,Z
 1331 0174 9181      		ldd r25,Z+1
 1332 0176 AC01      		movw r20,r24
 1333 0178 445D      		subi r20,-44
 1334 017a 5F4F      		sbci r21,-1
 1335 017c 70E0      		ldi r23,0
 1336 017e 60E0      		ldi r22,0
 1337 0180 4D83      		std Y+5,r20
 1338 0182 5E83      		std Y+6,r21
 1339 0184 6F83      		std Y+7,r22
 1340 0186 7887      		std Y+8,r23
 202:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			RNDISPacketHeader.DataLength    = RNDISInterfaceInfo->State.FrameOUT.FrameLength;
 1341               		.loc 1 202 0
 1342 0188 44E2      		ldi r20,lo8(36)
 1343 018a 50E0      		ldi r21,0
 1344 018c 60E0      		ldi r22,0
 1345 018e 70E0      		ldi r23,0
 1346 0190 4987      		std Y+9,r20
 1347 0192 5A87      		std Y+10,r21
 1348 0194 6B87      		std Y+11,r22
 1349 0196 7C87      		std Y+12,r23
 203:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 
 1350               		.loc 1 203 0
 1351 0198 B0E0      		ldi r27,0
 1352 019a A0E0      		ldi r26,0
 1353 019c 8D87      		std Y+13,r24
 1354 019e 9E87      		std Y+14,r25
 1355 01a0 AF87      		std Y+15,r26
 1356 01a2 B88B      		std Y+16,r27
 205:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_Write_Stream_LE(RNDISInterfaceInfo->State.FrameOUT.FrameData, RNDISPacketHeader.DataLen
 1357               		.loc 1 205 0
 1358 01a4 50E0      		ldi r21,0
 1359 01a6 40E0      		ldi r20,0
 1360 01a8 6CE2      		ldi r22,lo8(44)
 1361 01aa 70E0      		ldi r23,0
 1362 01ac CE01      		movw r24,r28
 1363 01ae 0196      		adiw r24,1
 1364 01b0 0E94 0000 		call Endpoint_Write_Stream_LE
 1365               	.LVL94:
 206:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 			Endpoint_ClearIN();
 1366               		.loc 1 206 0
 1367 01b4 6D85      		ldd r22,Y+13
 1368 01b6 7E85      		ldd r23,Y+14
 1369 01b8 50E0      		ldi r21,0
 1370 01ba 40E0      		ldi r20,0
 1371 01bc C801      		movw r24,r16
 1372 01be 8658      		subi r24,-122
 1373 01c0 994F      		sbci r25,-7
 1374 01c2 0E94 0000 		call Endpoint_Write_Stream_LE
 1375               	.LVL95:
 1376               	.LBB127:
 1377               	.LBB128:
 454:../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Endpoint.h **** 				#else
 1378               		.loc 2 454 0
 1379 01c6 8091 E800 		lds r24,232
 1380 01ca 8E77      		andi r24,lo8(126)
 1381 01cc 8093 E800 		sts 232,r24
 1382               	.LBE128:
 1383               	.LBE127:
 209:../../LUFA/Drivers/USB/Class/Device/RNDIS.c **** 		}
 1384               		.loc 1 209 0
 1385 01d0 F701      		movw r30,r14
 1386 01d2 1082      		st Z,__zero_reg__
 1387 01d4 00C0      		rjmp .L66
 1388               	.LBE129:
 1389               		.cfi_endproc
 1390               	.LFE67:
 1392               		.section	.progmem.data,"a",@progbits
 1395               	AdapterSupportedOIDList:
 1396 0000 01        		.byte	1
 1397 0001 01        		.byte	1
 1398 0002 01        		.byte	1
 1399 0003 00        		.byte	0
 1400 0004 02        		.byte	2
 1401 0005 02        		.byte	2
 1402 0006 01        		.byte	1
 1403 0007 00        		.byte	0
 1404 0008 02        		.byte	2
 1405 0009 01        		.byte	1
 1406 000a 01        		.byte	1
 1407 000b 00        		.byte	0
 1408 000c 03        		.byte	3
 1409 000d 01        		.byte	1
 1410 000e 01        		.byte	1
 1411 000f 00        		.byte	0
 1412 0010 04        		.byte	4
 1413 0011 01        		.byte	1
 1414 0012 01        		.byte	1
 1415 0013 00        		.byte	0
 1416 0014 06        		.byte	6
 1417 0015 01        		.byte	1
 1418 0016 01        		.byte	1
 1419 0017 00        		.byte	0
 1420 0018 11        		.byte	17
 1421 0019 01        		.byte	1
 1422 001a 01        		.byte	1
 1423 001b 00        		.byte	0
 1424 001c 07        		.byte	7
 1425 001d 01        		.byte	1
 1426 001e 01        		.byte	1
 1427 001f 00        		.byte	0
 1428 0020 0A        		.byte	10
 1429 0021 01        		.byte	1
 1430 0022 01        		.byte	1
 1431 0023 00        		.byte	0
 1432 0024 0B        		.byte	11
 1433 0025 01        		.byte	1
 1434 0026 01        		.byte	1
 1435 0027 00        		.byte	0
 1436 0028 0C        		.byte	12
 1437 0029 01        		.byte	1
 1438 002a 01        		.byte	1
 1439 002b 00        		.byte	0
 1440 002c 0D        		.byte	13
 1441 002d 01        		.byte	1
 1442 002e 01        		.byte	1
 1443 002f 00        		.byte	0
 1444 0030 0E        		.byte	14
 1445 0031 01        		.byte	1
 1446 0032 01        		.byte	1
 1447 0033 00        		.byte	0
 1448 0034 11        		.byte	17
 1449 0035 01        		.byte	1
 1450 0036 01        		.byte	1
 1451 0037 00        		.byte	0
 1452 0038 14        		.byte	20
 1453 0039 01        		.byte	1
 1454 003a 01        		.byte	1
 1455 003b 00        		.byte	0
 1456 003c 01        		.byte	1
 1457 003d 01        		.byte	1
 1458 003e 02        		.byte	2
 1459 003f 00        		.byte	0
 1460 0040 02        		.byte	2
 1461 0041 01        		.byte	1
 1462 0042 02        		.byte	2
 1463 0043 00        		.byte	0
 1464 0044 03        		.byte	3
 1465 0045 01        		.byte	1
 1466 0046 02        		.byte	2
 1467 0047 00        		.byte	0
 1468 0048 04        		.byte	4
 1469 0049 01        		.byte	1
 1470 004a 02        		.byte	2
 1471 004b 00        		.byte	0
 1472 004c 05        		.byte	5
 1473 004d 01        		.byte	1
 1474 004e 02        		.byte	2
 1475 004f 00        		.byte	0
 1476 0050 01        		.byte	1
 1477 0051 01        		.byte	1
 1478 0052 01        		.byte	1
 1479 0053 01        		.byte	1
 1480 0054 02        		.byte	2
 1481 0055 01        		.byte	1
 1482 0056 01        		.byte	1
 1483 0057 01        		.byte	1
 1484 0058 03        		.byte	3
 1485 0059 01        		.byte	1
 1486 005a 01        		.byte	1
 1487 005b 01        		.byte	1
 1488 005c 04        		.byte	4
 1489 005d 01        		.byte	1
 1490 005e 01        		.byte	1
 1491 005f 01        		.byte	1
 1492 0060 01        		.byte	1
 1493 0061 01        		.byte	1
 1494 0062 02        		.byte	2
 1495 0063 01        		.byte	1
 1496 0064 02        		.byte	2
 1497 0065 01        		.byte	1
 1498 0066 02        		.byte	2
 1499 0067 01        		.byte	1
 1500 0068 03        		.byte	3
 1501 0069 01        		.byte	1
 1502 006a 02        		.byte	2
 1503 006b 01        		.byte	1
 1504               		.text
 1505               	.Letext0:
 1506               		.file 3 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/stdint.h"
 1507               		.file 4 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/../HighLevel/StdRequestTy
 1508               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/../HighLevel/DeviceStanda
 1509               		.file 6 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/USBTask.h"
 1510               		.file 7 "../../LUFA/Drivers/USB/Class/Device/../../HighLevel/../LowLevel/Device.h"
 1511               		.file 8 "../../LUFA/Drivers/USB/Class/Device/../Common/RNDIS.h"
 1512               		.file 9 "../../LUFA/Drivers/USB/Class/Device/RNDIS.h"
 1513               		.file 10 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/avr/pgmspace.h"
 1514               		.file 11 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 RNDIS.c
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:4      *ABS*:000000000000003f __SREG__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:13     .text.RNDIS_Device_ProcessControlRequest:0000000000000000 RNDIS_Device_ProcessControlRequest
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:1395   .progmem.data:0000000000000000 AdapterSupportedOIDList
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:877    .text.RNDIS_Device_ConfigureEndpoints:0000000000000000 RNDIS_Device_ConfigureEndpoints
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccSv9hjK.s:1036   .text.RNDIS_Device_USBTask:0000000000000000 RNDIS_Device_USBTask

UNDEFINED SYMBOLS
USB_ControlRequest
Endpoint_Read_Control_Stream_LE
memcpy_P
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_BytesToEPSizeMaskDynamic
Endpoint_ConfigureEndpoint_Prv
Endpoint_Write_Stream_LE
Endpoint_Read_Stream_LE
__do_copy_data
