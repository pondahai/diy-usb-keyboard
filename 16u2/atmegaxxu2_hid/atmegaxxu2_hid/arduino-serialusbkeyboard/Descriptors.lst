   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB65:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  12:Descriptors.c **** 
  13:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  14:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  15:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  16:Descriptors.c ****   all copies and that both that the copyright notice and this
  17:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  18:Descriptors.c ****   documentation, and that the name of the author not be used in
  19:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  20:Descriptors.c ****   software without specific, written prior permission.
  21:Descriptors.c **** 
  22:Descriptors.c ****   The author disclaim all warranties with regard to this
  23:Descriptors.c ****   software, including all implied warranties of merchantability
  24:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  25:Descriptors.c ****   special, indirect or consequential damages or any damages
  26:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  27:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  28:Descriptors.c ****   arising out of or in connection with the use or performance of
  29:Descriptors.c ****   this software.
  30:Descriptors.c **** */
  31:Descriptors.c **** 
  32:Descriptors.c **** /** \file
  33:Descriptors.c ****  *
  34:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  35:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  36:Descriptors.c ****  *  the device's capabilities and functions.
  37:Descriptors.c ****  */
  38:Descriptors.c **** 
  39:Descriptors.c **** #include "Descriptors.h"
  40:Descriptors.c **** 
  41:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  42:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  43:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  44:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  45:Descriptors.c ****  *  more details on HID report descriptors.
  46:Descriptors.c ****  */
  47:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  48:Descriptors.c **** {
  49:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)                    */
  50:Descriptors.c **** 	0x09, 0x06,          /* Usage (Keyboard)                                */
  51:Descriptors.c **** 	0xa1, 0x01,          /* Collection (Application)                        */
  52:Descriptors.c **** 	0x75, 0x01,          /*   Report Size (1)                               */
  53:Descriptors.c **** 	0x95, 0x08,          /*   Report Count (8)                              */
  54:Descriptors.c **** 	0x05, 0x07,          /*   Usage Page (Key Codes)                        */
  55:Descriptors.c **** 	0x19, 0xe0,          /*   Usage Minimum (Keyboard LeftControl)          */
  56:Descriptors.c **** 	0x29, 0xe7,          /*   Usage Maximum (Keyboard Right GUI)            */
  57:Descriptors.c **** 	0x15, 0x00,          /*   Logical Minimum (0)                           */
  58:Descriptors.c **** 	0x25, 0x01,          /*   Logical Maximum (1)                           */
  59:Descriptors.c **** 	0x81, 0x02,          /*   Input (Data, Variable, Absolute)              */
  60:Descriptors.c **** 	0x95, 0x01,          /*   Report Count (1)                              */
  61:Descriptors.c **** 	0x75, 0x08,          /*   Report Size (8)                               */
  62:Descriptors.c **** 	0x81, 0x03,          /*   Input (Const, Variable, Absolute)             */
  63:Descriptors.c **** 	0x95, 0x05,          /*   Report Count (5)                              */
  64:Descriptors.c **** 	0x75, 0x01,          /*   Report Size (1)                               */
  65:Descriptors.c **** 	0x05, 0x08,          /*   Usage Page (LEDs)                             */
  66:Descriptors.c **** 	0x19, 0x01,          /*   Usage Minimum (Num Lock)                      */
  67:Descriptors.c **** 	0x29, 0x05,          /*   Usage Maximum (Kana)                          */
  68:Descriptors.c **** 	0x91, 0x02,          /*   Output (Data, Variable, Absolute)             */
  69:Descriptors.c **** 	0x95, 0x01,          /*   Report Count (1)                              */
  70:Descriptors.c **** 	0x75, 0x03,          /*   Report Size (3)                               */
  71:Descriptors.c **** 	0x91, 0x03,          /*   Output (Const, Variable, Absolute)            */
  72:Descriptors.c **** 	0x95, 0x06,          /*   Report Count (6)                              */
  73:Descriptors.c **** 	0x75, 0x08,          /*   Report Size (8)                               */
  74:Descriptors.c **** 	0x15, 0x00,          /*   Logical Minimum (0)                           */
  75:Descriptors.c **** 	0x25, 0x65,          /*   Logical Maximum (101)                         */
  76:Descriptors.c **** 	0x05, 0x07,          /*   Usage Page (Keyboard)                         */
  77:Descriptors.c **** 	0x19, 0x00,          /*   Usage Minimum (Reserved (no event indicated)) */
  78:Descriptors.c **** 	0x29, 0x65,          /*   Usage Maximum (Keyboard Application)          */
  79:Descriptors.c **** 	0x81, 0x00,          /*   Input (Data, Array, Absolute)                 */
  80:Descriptors.c **** 	0xc0                 /* End Collection                                  */
  81:Descriptors.c **** };
  82:Descriptors.c **** 
  83:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  84:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  85:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  86:Descriptors.c ****  *  process begins.
  87:Descriptors.c ****  */
  88:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  89:Descriptors.c **** {
  90:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  91:Descriptors.c **** 
  92:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  93:Descriptors.c **** 	.Class                  = 0x00,
  94:Descriptors.c **** 	.SubClass               = 0x00,
  95:Descriptors.c **** 	.Protocol               = 0x00,
  96:Descriptors.c **** 
  97:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  98:Descriptors.c **** 
  99:Descriptors.c **** 	.VendorID               = 0x03EB,
 100:Descriptors.c **** 	.ProductID              = 0x2042,
 101:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
 102:Descriptors.c **** 
 103:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
 104:Descriptors.c **** 	.ProductStrIndex        = 0x02,
 105:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
 106:Descriptors.c **** 
 107:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 108:Descriptors.c **** };
 109:Descriptors.c **** 
 110:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 111:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 112:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 113:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 114:Descriptors.c ****  */
 115:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 116:Descriptors.c **** {
 117:Descriptors.c **** 	.Config =
 118:Descriptors.c **** 		{
 119:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 120:Descriptors.c **** 
 121:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 122:Descriptors.c **** 			.TotalInterfaces        = 1,
 123:Descriptors.c **** 
 124:Descriptors.c **** 			.ConfigurationNumber    = 1,
 125:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 126:Descriptors.c **** 
 127:Descriptors.c **** 			.ConfigAttributes       = (USB_CONFIG_ATTR_BUSPOWERED | USB_CONFIG_ATTR_SELFPOWERED),
 128:Descriptors.c **** 
 129:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 130:Descriptors.c **** 		},
 131:Descriptors.c **** 
 132:Descriptors.c **** 	.HID_Interface =
 133:Descriptors.c **** 		{
 134:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 135:Descriptors.c **** 
 136:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 137:Descriptors.c **** 			.AlternateSetting       = 0x00,
 138:Descriptors.c **** 
 139:Descriptors.c **** 			.TotalEndpoints         = 2,
 140:Descriptors.c **** 
 141:Descriptors.c **** 			.Class                  = 0x03,
 142:Descriptors.c **** 			.SubClass               = 0x01,
 143:Descriptors.c **** 			.Protocol               = 0x01,
 144:Descriptors.c **** 
 145:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 146:Descriptors.c **** 		},
 147:Descriptors.c **** 
 148:Descriptors.c **** 	.HID_KeyboardHID =
 149:Descriptors.c **** 		{
 150:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_HID_t), .Type = DTYPE_HID},
 151:Descriptors.c **** 
 152:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 153:Descriptors.c **** 			.CountryCode            = 0x00,
 154:Descriptors.c **** 			.TotalReportDescriptors = 1,
 155:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 156:Descriptors.c **** 			.HIDReportLength        = sizeof(KeyboardReport)
 157:Descriptors.c **** 		},
 158:Descriptors.c **** 
 159:Descriptors.c **** 	.HID_ReportINEndpoint =
 160:Descriptors.c **** 		{
 161:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 162:Descriptors.c **** 
 163:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | KEYBOARD_IN_EPNUM),
 164:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 165:Descriptors.c **** 			.EndpointSize           = KEYBOARD_EPSIZE,
 166:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 167:Descriptors.c **** 		},
 168:Descriptors.c **** 
 169:Descriptors.c **** 	.HID_ReportOUTEndpoint =
 170:Descriptors.c **** 		{
 171:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 172:Descriptors.c **** 
 173:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_OUT | KEYBOARD_OUT_EPNUM),
 174:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 175:Descriptors.c **** 			.EndpointSize           = KEYBOARD_EPSIZE,
 176:Descriptors.c **** 			.PollingIntervalMS      = 0x0A
 177:Descriptors.c **** 		}
 178:Descriptors.c **** };
 179:Descriptors.c **** 
 180:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 181:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 182:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 183:Descriptors.c ****  */
 184:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 185:Descriptors.c **** {
 186:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 187:Descriptors.c **** 
 188:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 189:Descriptors.c **** };
 190:Descriptors.c **** 
 191:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 192:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 193:Descriptors.c ****  *  Descriptor.
 194:Descriptors.c ****  */
 195:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 196:Descriptors.c **** {
 197:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 198:Descriptors.c **** 
 199:Descriptors.c **** 	.UnicodeString          = L"Dean Camera"
 200:Descriptors.c **** };
 201:Descriptors.c **** 
 202:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 203:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 204:Descriptors.c ****  *  Descriptor.
 205:Descriptors.c ****  */
 206:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 207:Descriptors.c **** {
 208:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(18), .Type = DTYPE_String},
 209:Descriptors.c **** 
 210:Descriptors.c **** 	.UnicodeString          = L"LUFA Keyboard Demo"
 211:Descriptors.c **** };
 212:Descriptors.c **** 
 213:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 214:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 215:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 216:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 217:Descriptors.c ****  *  USB host.
 218:Descriptors.c ****  */
 219:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 220:Descriptors.c ****                                     const uint8_t wIndex,
 221:Descriptors.c ****                                     void** const DescriptorAddress)
 222:Descriptors.c **** {
  16               		.loc 1 222 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 223:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 223 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 224:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 225:Descriptors.c **** 
 226:Descriptors.c **** 	const void* Address = NULL;
 227:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 228:Descriptors.c **** 
 229:Descriptors.c **** 	switch (DescriptorType)
  26               		.loc 1 229 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 00F4      		brsh .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F0      		breq .L6
  37               	.LVL1:
  38               	.L14:
 227:Descriptors.c **** 
  39               		.loc 1 227 0
  40 0018 90E0      		ldi r25,0
  41 001a 80E0      		ldi r24,0
 226:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  42               		.loc 1 226 0
  43 001c 30E0      		ldi r19,0
  44 001e 20E0      		ldi r18,0
  45 0020 00C0      		rjmp .L2
  46               	.LVL2:
  47               	.L4:
  48               		.loc 1 229 0
  49 0022 2132      		cpi r18,33
  50 0024 3105      		cpc r19,__zero_reg__
  51 0026 01F0      		breq .L7
  52 0028 2232      		cpi r18,34
  53 002a 3105      		cpc r19,__zero_reg__
  54 002c 01F4      		brne .L14
  55               	.LVL3:
 230:Descriptors.c **** 	{
 231:Descriptors.c **** 		case DTYPE_Device:
 232:Descriptors.c **** 			Address = &DeviceDescriptor;
 233:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 234:Descriptors.c **** 			break;
 235:Descriptors.c **** 		case DTYPE_Configuration:
 236:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 237:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 238:Descriptors.c **** 			break;
 239:Descriptors.c **** 		case DTYPE_String:
 240:Descriptors.c **** 			switch (DescriptorNumber)
 241:Descriptors.c **** 			{
 242:Descriptors.c **** 				case 0x00:
 243:Descriptors.c **** 					Address = &LanguageString;
 244:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 245:Descriptors.c **** 					break;
 246:Descriptors.c **** 				case 0x01:
 247:Descriptors.c **** 					Address = &ManufacturerString;
 248:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 249:Descriptors.c **** 					break;
 250:Descriptors.c **** 				case 0x02:
 251:Descriptors.c **** 					Address = &ProductString;
 252:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 253:Descriptors.c **** 					break;
 254:Descriptors.c **** 			}
 255:Descriptors.c **** 
 256:Descriptors.c **** 			break;
 257:Descriptors.c **** 		case DTYPE_HID:
 258:Descriptors.c **** 			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 259:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_HID_t);
 260:Descriptors.c **** 			break;
 261:Descriptors.c **** 		case DTYPE_Report:
 262:Descriptors.c **** 			Address = &KeyboardReport;
 263:Descriptors.c **** 			Size    = sizeof(KeyboardReport);
  56               		.loc 1 263 0
  57 002e 8FE3      		ldi r24,lo8(63)
  58 0030 90E0      		ldi r25,0
  59               	.LVL4:
 262:Descriptors.c **** 			Size    = sizeof(KeyboardReport);
  60               		.loc 1 262 0
  61 0032 20E0      		ldi r18,lo8(KeyboardReport)
  62 0034 30E0      		ldi r19,hi8(KeyboardReport)
 264:Descriptors.c **** 			break;
  63               		.loc 1 264 0
  64 0036 00C0      		rjmp .L2
  65               	.LVL5:
  66               	.L5:
 233:Descriptors.c **** 			break;
  67               		.loc 1 233 0
  68 0038 82E1      		ldi r24,lo8(18)
  69 003a 90E0      		ldi r25,0
  70               	.LVL6:
 232:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  71               		.loc 1 232 0
  72 003c 20E0      		ldi r18,lo8(DeviceDescriptor)
  73 003e 30E0      		ldi r19,hi8(DeviceDescriptor)
  74               	.LVL7:
  75               	.L2:
 265:Descriptors.c **** 	}
 266:Descriptors.c **** 
 267:Descriptors.c **** 	*DescriptorAddress = Address;
  76               		.loc 1 267 0
  77 0040 FA01      		movw r30,r20
  78 0042 3183      		std Z+1,r19
  79 0044 2083      		st Z,r18
  80               	/* epilogue start */
 268:Descriptors.c **** 	return Size;
 269:Descriptors.c **** }
  81               		.loc 1 269 0
  82 0046 0895      		ret
  83               	.LVL8:
  84               	.L6:
 237:Descriptors.c **** 			break;
  85               		.loc 1 237 0
  86 0048 89E2      		ldi r24,lo8(41)
  87 004a 90E0      		ldi r25,0
  88               	.LVL9:
 236:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  89               		.loc 1 236 0
  90 004c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  91 004e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 238:Descriptors.c **** 		case DTYPE_String:
  92               		.loc 1 238 0
  93 0050 00C0      		rjmp .L2
  94               	.LVL10:
  95               	.L3:
 240:Descriptors.c **** 			{
  96               		.loc 1 240 0
  97 0052 9927      		clr r25
  98               	.LVL11:
  99 0054 8130      		cpi r24,1
 100 0056 9105      		cpc r25,__zero_reg__
 101 0058 01F0      		breq .L9
 102 005a 00F0      		brlo .L10
 103 005c 0297      		sbiw r24,2
 104 005e 01F4      		brne .L14
 105               	.LVL12:
 106               	.LBB2:
 252:Descriptors.c **** 					break;
 107               		.loc 1 252 0
 108 0060 E0E0      		ldi r30,lo8(ProductString)
 109 0062 F0E0      		ldi r31,hi8(ProductString)
 110 0064 00C0      		rjmp .L15
 111               	.LVL13:
 112               	.L10:
 113               	.LBE2:
 114               	.LBB3:
 244:Descriptors.c **** 					break;
 115               		.loc 1 244 0
 116 0066 E0E0      		ldi r30,lo8(LanguageString)
 117 0068 F0E0      		ldi r31,hi8(LanguageString)
 118               	.LVL14:
 119               	.L15:
 120               	.LBE3:
 121               	.LBB4:
 252:Descriptors.c **** 					break;
 122               		.loc 1 252 0
 123               	/* #APP */
 124               	 ;  252 "Descriptors.c" 1
 125 006a 8491      		lpm r24, Z
 126               		
 127               	 ;  0 "" 2
 128               	.LVL15:
 129               	/* #NOAPP */
 130               	.LBE4:
 131 006c 90E0      		ldi r25,0
 132               	.LVL16:
 251:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 133               		.loc 1 251 0
 134 006e 9F01      		movw r18,r30
 253:Descriptors.c **** 			}
 135               		.loc 1 253 0
 136 0070 00C0      		rjmp .L2
 137               	.LVL17:
 138               	.L9:
 139               	.LBB5:
 248:Descriptors.c **** 					break;
 140               		.loc 1 248 0
 141 0072 E0E0      		ldi r30,lo8(ManufacturerString)
 142 0074 F0E0      		ldi r31,hi8(ManufacturerString)
 143 0076 00C0      		rjmp .L15
 144               	.LVL18:
 145               	.L7:
 146               	.LBE5:
 259:Descriptors.c **** 			break;
 147               		.loc 1 259 0
 148 0078 89E0      		ldi r24,lo8(9)
 149 007a 90E0      		ldi r25,0
 150               	.LVL19:
 258:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_HID_t);
 151               		.loc 1 258 0
 152 007c 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 153 007e 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 154               	.LVL20:
 260:Descriptors.c **** 		case DTYPE_Report:
 155               		.loc 1 260 0
 156 0080 00C0      		rjmp .L2
 157               		.cfi_endproc
 158               	.LFE65:
 160               	.global	ProductString
 161               		.section	.progmem.data,"a",@progbits
 164               	ProductString:
 165 0000 26        		.byte	38
 166 0001 03        		.byte	3
 167 0002 4C00      		.string	"L"
 168 0004 5500      		.string	"U"
 169 0006 4600      		.string	"F"
 170 0008 4100      		.string	"A"
 171 000a 2000      		.string	" "
 172 000c 4B00      		.string	"K"
 173 000e 6500      		.string	"e"
 174 0010 7900      		.string	"y"
 175 0012 6200      		.string	"b"
 176 0014 6F00      		.string	"o"
 177 0016 6100      		.string	"a"
 178 0018 7200      		.string	"r"
 179 001a 6400      		.string	"d"
 180 001c 2000      		.string	" "
 181 001e 4400      		.string	"D"
 182 0020 6500      		.string	"e"
 183 0022 6D00      		.string	"m"
 184 0024 6F00      		.string	"o"
 185 0026 00        		.string	""
 186 0027 00        		.string	""
 187               	.global	ManufacturerString
 190               	ManufacturerString:
 191 0028 18        		.byte	24
 192 0029 03        		.byte	3
 193 002a 4400      		.string	"D"
 194 002c 6500      		.string	"e"
 195 002e 6100      		.string	"a"
 196 0030 6E00      		.string	"n"
 197 0032 2000      		.string	" "
 198 0034 4300      		.string	"C"
 199 0036 6100      		.string	"a"
 200 0038 6D00      		.string	"m"
 201 003a 6500      		.string	"e"
 202 003c 7200      		.string	"r"
 203 003e 6100      		.string	"a"
 204 0040 00        		.string	""
 205 0041 00        		.string	""
 206               	.global	LanguageString
 209               	LanguageString:
 210 0042 04        		.byte	4
 211 0043 03        		.byte	3
 212 0044 0904      		.word	1033
 213               	.global	ConfigurationDescriptor
 216               	ConfigurationDescriptor:
 217 0046 09        		.byte	9
 218 0047 02        		.byte	2
 219 0048 2900      		.word	41
 220 004a 01        		.byte	1
 221 004b 01        		.byte	1
 222 004c 00        		.byte	0
 223 004d C0        		.byte	-64
 224 004e 32        		.byte	50
 225 004f 09        		.byte	9
 226 0050 04        		.byte	4
 227 0051 00        		.byte	0
 228 0052 00        		.byte	0
 229 0053 02        		.byte	2
 230 0054 03        		.byte	3
 231 0055 01        		.byte	1
 232 0056 01        		.byte	1
 233 0057 00        		.byte	0
 234 0058 09        		.byte	9
 235 0059 21        		.byte	33
 236 005a 1101      		.word	273
 237 005c 00        		.byte	0
 238 005d 01        		.byte	1
 239 005e 22        		.byte	34
 240 005f 3F00      		.word	63
 241 0061 07        		.byte	7
 242 0062 05        		.byte	5
 243 0063 81        		.byte	-127
 244 0064 03        		.byte	3
 245 0065 0800      		.word	8
 246 0067 0A        		.byte	10
 247 0068 07        		.byte	7
 248 0069 05        		.byte	5
 249 006a 02        		.byte	2
 250 006b 03        		.byte	3
 251 006c 0800      		.word	8
 252 006e 0A        		.byte	10
 253               	.global	DeviceDescriptor
 256               	DeviceDescriptor:
 257 006f 12        		.byte	18
 258 0070 01        		.byte	1
 259 0071 1001      		.word	272
 260 0073 00        		.byte	0
 261 0074 00        		.byte	0
 262 0075 00        		.byte	0
 263 0076 08        		.byte	8
 264 0077 EB03      		.word	1003
 265 0079 4220      		.word	8258
 266 007b 0100      		.word	1
 267 007d 01        		.byte	1
 268 007e 02        		.byte	2
 269 007f 00        		.byte	0
 270 0080 01        		.byte	1
 271               	.global	KeyboardReport
 274               	KeyboardReport:
 275 0081 05        		.byte	5
 276 0082 01        		.byte	1
 277 0083 09        		.byte	9
 278 0084 06        		.byte	6
 279 0085 A1        		.byte	-95
 280 0086 01        		.byte	1
 281 0087 75        		.byte	117
 282 0088 01        		.byte	1
 283 0089 95        		.byte	-107
 284 008a 08        		.byte	8
 285 008b 05        		.byte	5
 286 008c 07        		.byte	7
 287 008d 19        		.byte	25
 288 008e E0        		.byte	-32
 289 008f 29        		.byte	41
 290 0090 E7        		.byte	-25
 291 0091 15        		.byte	21
 292 0092 00        		.byte	0
 293 0093 25        		.byte	37
 294 0094 01        		.byte	1
 295 0095 81        		.byte	-127
 296 0096 02        		.byte	2
 297 0097 95        		.byte	-107
 298 0098 01        		.byte	1
 299 0099 75        		.byte	117
 300 009a 08        		.byte	8
 301 009b 81        		.byte	-127
 302 009c 03        		.byte	3
 303 009d 95        		.byte	-107
 304 009e 05        		.byte	5
 305 009f 75        		.byte	117
 306 00a0 01        		.byte	1
 307 00a1 05        		.byte	5
 308 00a2 08        		.byte	8
 309 00a3 19        		.byte	25
 310 00a4 01        		.byte	1
 311 00a5 29        		.byte	41
 312 00a6 05        		.byte	5
 313 00a7 91        		.byte	-111
 314 00a8 02        		.byte	2
 315 00a9 95        		.byte	-107
 316 00aa 01        		.byte	1
 317 00ab 75        		.byte	117
 318 00ac 03        		.byte	3
 319 00ad 91        		.byte	-111
 320 00ae 03        		.byte	3
 321 00af 95        		.byte	-107
 322 00b0 06        		.byte	6
 323 00b1 75        		.byte	117
 324 00b2 08        		.byte	8
 325 00b3 15        		.byte	21
 326 00b4 00        		.byte	0
 327 00b5 25        		.byte	37
 328 00b6 65        		.byte	101
 329 00b7 05        		.byte	5
 330 00b8 07        		.byte	7
 331 00b9 19        		.byte	25
 332 00ba 00        		.byte	0
 333 00bb 29        		.byte	41
 334 00bc 65        		.byte	101
 335 00bd 81        		.byte	-127
 336 00be 00        		.byte	0
 337 00bf C0        		.byte	-64
 338               		.text
 339               	.Letext0:
 340               		.file 2 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/stdint.h"
 341               		.file 3 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/lib/gcc/avr/7.3.0/include/stdd
 342               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 343               		.file 5 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdRequestType.h"
 344               		.file 6 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/DeviceStandardReq.h"
 345               		.file 7 "../../LUFA/Drivers/USB/HighLevel/USBTask.h"
 346               		.file 8 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:4      *ABS*:000000000000003f __SREG__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:274    .progmem.data:0000000000000081 KeyboardReport
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:256    .progmem.data:000000000000006f DeviceDescriptor
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:216    .progmem.data:0000000000000046 ConfigurationDescriptor
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:164    .progmem.data:0000000000000000 ProductString
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:209    .progmem.data:0000000000000042 LanguageString
/var/folders/j8/tgcwrqr14993zwf2fgrl_9qc0000gq/T//ccE1ABTH.s:190    .progmem.data:0000000000000028 ManufacturerString

NO UNDEFINED SYMBOLS
